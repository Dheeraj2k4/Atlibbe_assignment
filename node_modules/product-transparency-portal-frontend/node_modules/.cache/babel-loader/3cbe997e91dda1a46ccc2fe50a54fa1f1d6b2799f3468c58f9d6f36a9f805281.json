{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\pages\\\\ProductForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({\n  theme\n}) => theme.borderRadius.default};\n  box-shadow: ${({\n  theme\n}) => theme.shadows.medium};\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    padding: 1.5rem;\n  }\n`;\n_c = FormContainer;\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n_c2 = FormHeader;\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  margin-bottom: 1rem;\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    font-size: 1.75rem;\n  }\n`;\n_c3 = FormTitle;\nconst FormDescription = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.lightText};\n  font-size: 1.125rem;\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    font-size: 1rem;\n  }\n`;\n_c4 = FormDescription;\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  \n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  margin-top: 2rem;\n`;\n_c5 = FormActions;\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n_c6 = LoadingOverlay;\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n_c7 = Spinner;\nconst basicFields = [{\n  id: 'name',\n  question_text: 'Product Name',\n  question_type: 'text',\n  required: true\n}, {\n  id: 'description',\n  question_text: 'Product Description',\n  question_type: 'text',\n  required: true,\n  tooltip: 'Provide a detailed description of your product, including its purpose and benefits.'\n}, {\n  id: 'category',\n  question_text: 'Product Category',\n  question_type: 'select',\n  required: true,\n  options: [{\n    value: 'supplements',\n    label: 'Supplements'\n  }, {\n    value: 'food',\n    label: 'Food & Beverage'\n  }, {\n    value: 'cosmetics',\n    label: 'Cosmetics'\n  }, {\n    value: 'personal_care',\n    label: 'Personal Care'\n  }, {\n    value: 'household',\n    label: 'Household Products'\n  }, {\n    value: 'other',\n    label: 'Other'\n  }]\n}];\nconst initialBasicValues = {\n  name: '',\n  description: '',\n  category: ''\n};\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required')\n});\nconst ProductForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [currentStep, setCurrentStep] = useState(1);\n  const [productData, setProductData] = useState(null);\n  const [aiQuestions, setAiQuestions] = useState([]);\n  const handleBasicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating AI questions...');\n    try {\n      // Create a product object with only the basic info\n      const product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n\n      // Save product data for later submission\n      setProductData(product);\n\n      // Generate AI questions based on product information\n      const generateRequest = {\n        product: product,\n        num_questions: 5 // You can adjust this number as needed\n      };\n      const aiResponse = await aiApi.generateQuestions(generateRequest);\n      if (aiResponse.success && aiResponse.data) {\n        // Convert the AI-generated questions to Question objects\n        const questions = aiResponse.data.questions.map((questionText, index) => ({\n          id: `q_${index}`,\n          question_text: questionText,\n          question_type: 'text',\n          required: false,\n          is_ai_generated: true\n        }));\n        setAiQuestions(questions);\n        setCurrentStep(2); // Move to the AI questions step\n      } else {\n        alert(`Error: ${aiResponse.error || 'Failed to generate questions. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Function to download PDF directly\n  const downloadPDF = async (productId, productName) => {\n    try {\n      // Request the PDF data directly\n      const pdfBlob = await reportApi.downloadReport(productId);\n\n      // Create a URL for the blob and trigger download\n      const url = window.URL.createObjectURL(pdfBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${productName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_transparency_report.pdf`;\n      document.body.appendChild(a);\n      a.click();\n\n      // Clean up\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }, 100);\n      return true;\n    } catch (error) {\n      console.error('Error downloading PDF:', error);\n      alert(`Error downloading PDF: ${error.message || 'Unknown error'}`);\n      return false;\n    }\n  };\n\n  // Handle the submission of AI-generated questions\n  const handleQuestionsSubmit = async (values, {\n    setSubmitting\n  }) => {\n    if (!productData) {\n      alert('Product data is missing. Please go back and try again.');\n      return;\n    }\n    setIsLoading(true);\n    setLoadingMessage('Submitting your product information...');\n    try {\n      // Create a product with the answers to AI questions\n      const product = {\n        ...productData,\n        additional_info: values // Store all question answers in additional_info\n      };\n\n      // Submit the product to the database\n      const response = await productApi.createProduct(product);\n      if (response.success && response.data) {\n        setLoadingMessage('Generating PDF report...');\n\n        // Store AI questions and answers for reference\n        const questionAnswers = {};\n        aiQuestions.forEach(question => {\n          if (question.id && values[question.id]) {\n            questionAnswers[question.question_text] = values[question.id];\n          }\n        });\n\n        // Log the data being sent to the backend\n        console.log('Product data submitted:', product);\n        console.log('AI questions and answers:', questionAnswers);\n\n        // Generate PDF directly in the browser\n        try {\n          // Download the PDF\n          await downloadPDF(response.data.id, product.name);\n\n          // Navigate to the report page\n          navigate(`/report/${response.data.id}`);\n        } catch (pdfError) {\n          console.error('Error generating PDF:', pdfError);\n          // If PDF generation fails, still navigate to the report page\n          navigate(`/report/${response.data.id}`);\n        }\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while submitting the product.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Generate initial values for AI questions form\n  const initialQuestionsValues = useMemo(() => {\n    const values = {};\n    aiQuestions.forEach(question => {\n      values[question.id] = '';\n    });\n    return values;\n  }, [aiQuestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n        children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n          children: \"Product Submission Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n          children: currentStep === 1 ? 'Complete the form below to generate AI questions about your product.' : 'Please answer the following AI-generated questions about your product.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), currentStep === 1 ? /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialBasicValues,\n        validationSchema: basicValidation,\n        onSubmit: handleBasicSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [basicFields.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id,\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: Array.isArray(field.options) ? field.options.map(option => typeof option === 'string' ? {\n              value: option,\n              label: option\n            } : option) : undefined,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialQuestionsValues,\n        onSubmit: handleQuestionsSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [aiQuestions.map(question => /*#__PURE__*/_jsxDEV(FormField, {\n            label: question.question_text,\n            name: question.id,\n            type: \"textarea\",\n            required: question.required\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"outline\",\n              onClick: () => setCurrentStep(1),\n              disabled: isSubmitting,\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductForm, \"cJDDlSy2CIYX7uNaBoAkRCGs3L0=\", false, function () {\n  return [useNavigate];\n});\n_c8 = ProductForm;\nexport default ProductForm;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"FormContainer\");\n$RefreshReg$(_c2, \"FormHeader\");\n$RefreshReg$(_c3, \"FormTitle\");\n$RefreshReg$(_c4, \"FormDescription\");\n$RefreshReg$(_c5, \"FormActions\");\n$RefreshReg$(_c6, \"LoadingOverlay\");\n$RefreshReg$(_c7, \"Spinner\");\n$RefreshReg$(_c8, \"ProductForm\");","map":{"version":3,"names":["React","useState","useMemo","useNavigate","styled","Formik","Form","Yup","FormField","Button","productApi","aiApi","jsxDEV","_jsxDEV","FormContainer","div","theme","borderRadius","default","shadows","medium","breakpoints","md","_c","FormHeader","_c2","FormTitle","h1","colors","primary","_c3","FormDescription","p","lightText","_c4","FormActions","_c5","LoadingOverlay","_c6","Spinner","_c7","basicFields","id","question_text","question_type","required","tooltip","options","value","label","initialBasicValues","name","description","category","basicValidation","object","string","ProductForm","_s","navigate","isLoading","setIsLoading","loadingMessage","setLoadingMessage","currentStep","setCurrentStep","productData","setProductData","aiQuestions","setAiQuestions","handleBasicSubmit","values","setSubmitting","product","ingredients","manufacturing_location","certifications","additional_info","generateRequest","num_questions","aiResponse","generateQuestions","success","data","questions","map","questionText","index","is_ai_generated","alert","error","console","downloadPDF","productId","productName","pdfBlob","reportApi","downloadReport","url","window","URL","createObjectURL","a","document","createElement","href","download","replace","toLowerCase","body","appendChild","click","setTimeout","revokeObjectURL","removeChild","message","handleQuestionsSubmit","response","createProduct","questionAnswers","forEach","question","log","pdfError","initialQuestionsValues","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","validationSchema","onSubmit","validateOnChange","validateOnBlur","isSubmitting","field","type","Array","isArray","option","undefined","disabled","variant","onClick","_c8","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/pages/ProductForm.tsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { FormStep, FormValues, Product, Question, GenerateQuestionsRequest } from '../types';\n\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({ theme }) => theme.borderRadius.default};\n  box-shadow: ${({ theme }) => theme.shadows.medium};\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    padding: 1.5rem;\n  }\n`;\n\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 1rem;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 1.75rem;\n  }\n`;\n\nconst FormDescription = styled.p`\n  color: ${({ theme }) => theme.colors.lightText};\n  font-size: 1.125rem;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 1rem;\n  }\n`;\n\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  \n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  margin-top: 2rem;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst basicFields: Question[] = [\n  {\n    id: 'name',\n    question_text: 'Product Name',\n    question_type: 'text',\n    required: true,\n  },\n  {\n    id: 'description',\n    question_text: 'Product Description',\n    question_type: 'text',\n    required: true,\n    tooltip: 'Provide a detailed description of your product, including its purpose and benefits.',\n  },\n  {\n    id: 'category',\n    question_text: 'Product Category',\n    question_type: 'select',\n    required: true,\n    options: [\n      { value: 'supplements', label: 'Supplements' },\n      { value: 'food', label: 'Food & Beverage' },\n      { value: 'cosmetics', label: 'Cosmetics' },\n      { value: 'personal_care', label: 'Personal Care' },\n      { value: 'household', label: 'Household Products' },\n      { value: 'other', label: 'Other' },\n    ],\n  },\n];\n\nconst initialBasicValues: FormValues = {\n  name: '',\n  description: '',\n  category: '',\n};\n\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required'),\n});\n\nconst ProductForm: React.FC = () => {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [currentStep, setCurrentStep] = useState(1);\n  const [productData, setProductData] = useState<Product | null>(null);\n  const [aiQuestions, setAiQuestions] = useState<Question[]>([]);\n\n  const handleBasicSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating AI questions...');\n\n    try {\n      // Create a product object with only the basic info\n      const product: Product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {},\n      };\n\n      // Save product data for later submission\n      setProductData(product);\n\n      // Generate AI questions based on product information\n      const generateRequest: GenerateQuestionsRequest = {\n        product: product,\n        num_questions: 5 // You can adjust this number as needed\n      };\n\n      const aiResponse = await aiApi.generateQuestions(generateRequest);\n      \n      if (aiResponse.success && aiResponse.data) {\n        // Convert the AI-generated questions to Question objects\n        const questions: Question[] = aiResponse.data.questions.map((questionText, index) => ({\n          id: `q_${index}`,\n          question_text: questionText,\n          question_type: 'text' as const,\n          required: false,\n          is_ai_generated: true\n        }));\n        \n        setAiQuestions(questions);\n        setCurrentStep(2); // Move to the AI questions step\n      } else {\n        alert(`Error: ${aiResponse.error || 'Failed to generate questions. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Function to download PDF directly\n  const downloadPDF = async (productId: string, productName: string) => {\n    try {\n      // Request the PDF data directly\n      const pdfBlob = await reportApi.downloadReport(productId);\n      \n      // Create a URL for the blob and trigger download\n      const url = window.URL.createObjectURL(pdfBlob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${productName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_transparency_report.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      \n      // Clean up\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }, 100);\n      \n      return true;\n    } catch (error: any) {\n      console.error('Error downloading PDF:', error);\n      alert(`Error downloading PDF: ${error.message || 'Unknown error'}`);\n      return false;\n    }\n  };\n\n  // Handle the submission of AI-generated questions\n  const handleQuestionsSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    if (!productData) {\n      alert('Product data is missing. Please go back and try again.');\n      return;\n    }\n\n    setIsLoading(true);\n    setLoadingMessage('Submitting your product information...');\n\n    try {\n      // Create a product with the answers to AI questions\n      const product: Product = {\n        ...productData,\n        additional_info: values // Store all question answers in additional_info\n      };\n\n      // Submit the product to the database\n      const response = await productApi.createProduct(product);\n      \n      if (response.success && response.data) {\n        setLoadingMessage('Generating PDF report...');\n        \n        // Store AI questions and answers for reference\n        const questionAnswers: Record<string, any> = {};\n        aiQuestions.forEach(question => {\n          if (question.id && values[question.id]) {\n            questionAnswers[question.question_text] = values[question.id];\n          }\n        });\n        \n        // Log the data being sent to the backend\n        console.log('Product data submitted:', product);\n        console.log('AI questions and answers:', questionAnswers);\n        \n        // Generate PDF directly in the browser\n        try {\n          // Download the PDF\n          await downloadPDF(response.data.id, product.name);\n          \n          // Navigate to the report page\n          navigate(`/report/${response.data.id}`);\n        } catch (pdfError) {\n          console.error('Error generating PDF:', pdfError);\n          // If PDF generation fails, still navigate to the report page\n          navigate(`/report/${response.data.id}`);\n        }\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while submitting the product.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Generate initial values for AI questions form\n  const initialQuestionsValues = useMemo(() => {\n    const values: FormValues = {};\n    aiQuestions.forEach(question => {\n      values[question.id!] = '';\n    });\n    return values;\n  }, [aiQuestions]);\n\n  return (\n    <div className=\"container\">\n      <FormContainer>\n        <FormHeader>\n          <FormTitle>Product Submission Form</FormTitle>\n          <FormDescription>\n            {currentStep === 1 \n              ? 'Complete the form below to generate AI questions about your product.'\n              : 'Please answer the following AI-generated questions about your product.'}\n          </FormDescription>\n        </FormHeader>\n\n        {currentStep === 1 ? (\n          <Formik\n            initialValues={initialBasicValues}\n            validationSchema={basicValidation}\n            onSubmit={handleBasicSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {basicFields.map((field) => (\n                  <FormField\n                    key={field.id}\n                    label={field.question_text}\n                    name={field.id!}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={\n                      Array.isArray(field.options)\n                        ? field.options.map((option) =>\n                            typeof option === 'string'\n                              ? { value: option, label: option }\n                              : option\n                          )\n                        : undefined\n                    }\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Next\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        ) : (\n          <Formik\n            initialValues={initialQuestionsValues}\n            onSubmit={handleQuestionsSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {aiQuestions.map((question) => (\n                  <FormField\n                    key={question.id}\n                    label={question.question_text}\n                    name={question.id!}\n                    type=\"textarea\"\n                    required={question.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setCurrentStep(1)}\n                    disabled={isSubmitting}\n                  >\n                    Back\n                  </Button>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Submit\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n\n        {isLoading && (\n          <LoadingOverlay>\n            <Spinner />\n            <p>{loadingMessage}</p>\n          </LoadingOverlay>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default ProductForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}