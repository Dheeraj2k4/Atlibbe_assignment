{"ast":null,"code":"// src/services/api.ts\nimport axios from 'axios';\n// Helper function to validate MongoDB ObjectId format\nconst isValidObjectId = id => /^[0-9a-fA-F]{24}$/.test(id);\n\n// Axios instances\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst aiService = axios.create({\n  baseURL: process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptors to attach token if present\napi.interceptors.request.use(async config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Reattempt request if 401 and retry not already set\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return api(originalRequest);\n  }\n  return Promise.reject(error);\n});\nexport const productApi = {\n  // Create new product with question-answer pairs\n  createProduct: async productData => {\n    try {\n      const response = await api.post('/api/products', productData);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error creating product:', error);\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to create product'\n      };\n    }\n  },\n  getProduct: async id => {\n    try {\n      if (!isValidObjectId(id)) {\n        return {\n          success: false,\n          error: 'Invalid product ID format'\n        };\n      }\n      const response = await api.get(`/api/products/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch product'\n      };\n    }\n  }\n};\nexport const reportApi = {\n  getReport: async id => {\n    try {\n      if (!isValidObjectId(id)) {\n        return {\n          success: false,\n          error: 'Invalid product ID format'\n        };\n      }\n      const response = await api.get(`/api/report/product/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error fetching report:', error);\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to fetch report'\n      };\n    }\n  },\n  downloadReport: async id => {\n    try {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n      const response = await api.get(`/api/report/download/${id}`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error downloading report:', error);\n      throw error;\n    }\n  },\n  previewReport: async id => {\n    try {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n      return `${api.defaults.baseURL}/api/report/preview/${id}`;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error generating preview URL:', error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to generate preview URL');\n    }\n  },\n  generateReport: async payload => {\n    try {\n      const response = await api.post('/api/report/generate', payload);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error generating report:', error);\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to generate report'\n      };\n    }\n  }\n};\nexport const aiApi = {\n  generateQuestions: async request => {\n    try {\n      const response = await aiService.post('/api/generate-questions', request);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error('Error generating questions:', error);\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || 'Failed to generate questions'\n      };\n    }\n  },\n  getTransparencyScore: async request => {\n    try {\n      const response = await aiService.post('/api/transparency-score', request);\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      return {\n        success: false,\n        error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || 'Failed to calculate transparency score'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","isValidObjectId","id","test","api","create","baseURL","process","env","REACT_APP_API_URL","headers","aiService","REACT_APP_AI_SERVICE_URL","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","originalRequest","status","_retry","productApi","createProduct","productData","post","data","_error$response2","_error$response2$data","console","success","getProduct","get","_error$response3","_error$response3$data","reportApi","getReport","_error$response4","_error$response4$data","downloadReport","Error","responseType","previewReport","defaults","_error$response5","_error$response5$data","generateReport","payload","_error$response6","_error$response6$data","aiApi","generateQuestions","_error$response7","_error$response7$data","getTransparencyScore","_error$response8","_error$response8$data"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\nimport axios, { AxiosResponse } from 'axios';\nimport {\n  Product,\n  Report,\n  ApiResponse,\n  GenerateQuestionsResponse,\n  TransparencyScoreRequest,\n  TransparencyScoreResponse,\n  GenerateQuestionsRequest,\n  Question,\n} from '../types';\n\n// Helper function to validate MongoDB ObjectId format\nconst isValidObjectId = (id: string): boolean => /^[0-9a-fA-F]{24}$/.test(id);\n\n// Axios instances\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: { 'Content-Type': 'application/json' },\n});\n\nconst aiService = axios.create({\n  baseURL: process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:8000',\n  headers: { 'Content-Type': 'application/json' },\n});\n\n// Interceptors to attach token if present\napi.interceptors.request.use(\n  async (config) => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Reattempt request if 401 and retry not already set\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      return api(originalRequest);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const productApi = {\n  // Create new product with question-answer pairs\n  createProduct: async (productData: Product & { questions?: Question[] }) => {\n    try {\n      const response: AxiosResponse<ApiResponse<Product>> = await api.post(\n        '/api/products',\n        productData\n      );\n      return response.data;\n    } catch (error: any) {\n      console.error('Error creating product:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to create product',\n      };\n    }\n  },\n\n  getProduct: async (id: string): Promise<ApiResponse<Product>> => {\n    try {\n      if (!isValidObjectId(id)) {\n        return { success: false, error: 'Invalid product ID format' };\n      }\n\n      const response: AxiosResponse<ApiResponse<Product>> = await api.get(`/api/products/${id}`);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to fetch product',\n      };\n    }\n  },\n};\n\nexport const reportApi = {\n  getReport: async (id: string): Promise<ApiResponse<Report>> => {\n    try {\n      if (!isValidObjectId(id)) {\n        return { success: false, error: 'Invalid product ID format' };\n      }\n\n      const response: AxiosResponse<ApiResponse<Report>> = await api.get(`/api/report/product/${id}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching report:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to fetch report',\n      };\n    }\n  },\n\n  downloadReport: async (id: string): Promise<Blob> => {\n    try {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n\n      const response = await api.get(`/api/report/download/${id}`, {\n        responseType: 'blob',\n      });\n      return response.data;\n    } catch (error: any) {\n      console.error('Error downloading report:', error);\n      throw error;\n    }\n  },\n\n  previewReport: async (id: string): Promise<string> => {\n    try {\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n\n      return `${api.defaults.baseURL}/api/report/preview/${id}`;\n    } catch (error: any) {\n      console.error('Error generating preview URL:', error);\n      throw new Error(error.response?.data?.error || 'Failed to generate preview URL');\n    }\n  },\n\n  generateReport: async (\n    payload: { product: Product }\n  ): Promise<ApiResponse<{ pdf_url: string; report: Report }>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<{ pdf_url: string; report: Report }>> = await api.post(\n        '/api/report/generate',\n        payload\n      );\n      return response.data;\n    } catch (error: any) {\n      console.error('Error generating report:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to generate report',\n      };\n    }\n  },\n};\n\nexport const aiApi = {\n  generateQuestions: async (\n    request: GenerateQuestionsRequest\n  ): Promise<ApiResponse<GenerateQuestionsResponse>> => {\n    try {\n      const response: AxiosResponse<GenerateQuestionsResponse> = await aiService.post(\n        '/api/generate-questions',\n        request\n      );\n      return {\n        success: true,\n        data: response.data,\n      };\n    } catch (error: any) {\n      console.error('Error generating questions:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to generate questions',\n      };\n    }\n  },\n\n  getTransparencyScore: async (\n    request: TransparencyScoreRequest\n  ): Promise<ApiResponse<TransparencyScoreResponse>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<TransparencyScoreResponse>> = await aiService.post(\n        '/api/transparency-score',\n        request\n      );\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to calculate transparency score',\n      };\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}