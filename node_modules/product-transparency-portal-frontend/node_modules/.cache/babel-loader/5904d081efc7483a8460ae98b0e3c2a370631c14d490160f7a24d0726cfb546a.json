{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import reportService from'../services/reportService';import{useAuth}from'./AuthContext';// Context interface\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create context with default values\nconst ReportContext=/*#__PURE__*/createContext({reports:[],userReports:[],isLoading:false,error:null,generateReport:async()=>({report_id:'',filename:'',report_url:'',report_type:''}),getReportsByProduct:async()=>[],getReportById:async()=>({_id:'',product:{_id:'',name:''},filename:'',filepath:'',created_by:{_id:'',name:'',email:''},report_type:'product_details',metadata:{},created_at:'',updated_at:''}),deleteReport:async()=>{},refreshReports:async()=>{},clearError:()=>{}});// Props interface\n/**\n * Report Provider Component\n * Provides report state and methods to the app\n */export const ReportProvider=_ref=>{let{children}=_ref;const[reports,setReports]=useState([]);const[userReports,setUserReports]=useState([]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const{user,isAdmin,isAuthenticated}=useAuth();// Load reports when user changes\nuseEffect(()=>{if(isAuthenticated){refreshReports();}},[isAuthenticated,user===null||user===void 0?void 0:user._id]);/**\n   * Refresh reports data\n   */const refreshReports=async()=>{if(!isAuthenticated)return;setIsLoading(true);setError(null);try{// Get user reports\nconst userReportsData=await reportService.getUserReports();setUserReports(userReportsData);// Get all reports for admin users\nif(isAdmin){const allReports=await reportService.getAllReports();setReports(allReports);}else{setReports(userReportsData);}}catch(err){setError(err.message||'Failed to load reports');console.error('Error loading reports:',err);}finally{setIsLoading(false);}};/**\n   * Generate a new report\n   * @param params Report generation parameters\n   */const generateReport=async params=>{setIsLoading(true);setError(null);try{const newReport=await reportService.generateReport(params);await refreshReports();return newReport;}catch(err){setError(err.message||'Failed to generate report');throw err;}finally{setIsLoading(false);}};/**\n   * Get reports by product ID\n   * @param productId Product ID\n   */const getReportsByProduct=async productId=>{setIsLoading(true);setError(null);try{return await reportService.getReportsByProduct(productId);}catch(err){setError(err.message||'Failed to get reports');throw err;}finally{setIsLoading(false);}};/**\n   * Get report by ID\n   * @param reportId Report ID\n   */const getReportById=async reportId=>{setIsLoading(true);setError(null);try{return await reportService.getReportById(reportId);}catch(err){setError(err.message||'Failed to get report');throw err;}finally{setIsLoading(false);}};/**\n   * Delete a report\n   * @param reportId Report ID\n   */const deleteReport=async reportId=>{setIsLoading(true);setError(null);try{await reportService.deleteReport(reportId);await refreshReports();}catch(err){setError(err.message||'Failed to delete report');throw err;}finally{setIsLoading(false);}};/**\n   * Clear error\n   */const clearError=()=>{setError(null);};// Context value\nconst value={reports,userReports,isLoading,error,generateReport,getReportsByProduct,getReportById,deleteReport,refreshReports,clearError};return/*#__PURE__*/_jsx(ReportContext.Provider,{value:value,children:children});};/**\n * Custom hook to use report context\n * @returns Report context\n */export const useReports=()=>useContext(ReportContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","reportService","useAuth","jsx","_jsx","ReportContext","reports","userReports","isLoading","error","generateReport","report_id","filename","report_url","report_type","getReportsByProduct","getReportById","_id","product","name","filepath","created_by","email","metadata","created_at","updated_at","deleteReport","refreshReports","clearError","ReportProvider","_ref","children","setReports","setUserReports","setIsLoading","setError","user","isAdmin","isAuthenticated","userReportsData","getUserReports","allReports","getAllReports","err","message","console","params","newReport","productId","reportId","value","Provider","useReports"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/contexts/ReportContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport reportService, { Report, GenerateReportParams, GenerateReportResponse } from '../services/reportService';\nimport { useAuth } from './AuthContext';\n\n// Context interface\ninterface ReportContextType {\n  reports: Report[];\n  userReports: Report[];\n  isLoading: boolean;\n  error: string | null;\n  generateReport: (params: GenerateReportParams) => Promise<GenerateReportResponse>;\n  getReportsByProduct: (productId: string) => Promise<Report[]>;\n  getReportById: (reportId: string) => Promise<Report>;\n  deleteReport: (reportId: string) => Promise<void>;\n  refreshReports: () => Promise<void>;\n  clearError: () => void;\n}\n\n// Create context with default values\nconst ReportContext = createContext<ReportContextType>({\n  reports: [],\n  userReports: [],\n  isLoading: false,\n  error: null,\n  generateReport: async () => ({ report_id: '', filename: '', report_url: '', report_type: '' }),\n  getReportsByProduct: async () => [],\n  getReportById: async () => ({\n    _id: '',\n    product: {\n      _id: '',\n      name: '',\n    },\n    filename: '',\n    filepath: '',\n    created_by: {\n      _id: '',\n      name: '',\n      email: '',\n    },\n    report_type: 'product_details',\n    metadata: {},\n    created_at: '',\n    updated_at: '',\n  }),\n  deleteReport: async () => {},\n  refreshReports: async () => {},\n  clearError: () => {},\n});\n\n// Props interface\ninterface ReportProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Report Provider Component\n * Provides report state and methods to the app\n */\nexport const ReportProvider: React.FC<ReportProviderProps> = ({ children }) => {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [userReports, setUserReports] = useState<Report[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user, isAdmin, isAuthenticated } = useAuth();\n\n  // Load reports when user changes\n  useEffect(() => {\n    if (isAuthenticated) {\n      refreshReports();\n    }\n  }, [isAuthenticated, user?._id]);\n\n  /**\n   * Refresh reports data\n   */\n  const refreshReports = async () => {\n    if (!isAuthenticated) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Get user reports\n      const userReportsData = await reportService.getUserReports();\n      setUserReports(userReportsData);\n      \n      // Get all reports for admin users\n      if (isAdmin) {\n        const allReports = await reportService.getAllReports();\n        setReports(allReports);\n      } else {\n        setReports(userReportsData);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load reports');\n      console.error('Error loading reports:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Generate a new report\n   * @param params Report generation parameters\n   */\n  const generateReport = async (params: GenerateReportParams) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const newReport = await reportService.generateReport(params);\n      await refreshReports();\n      return newReport;\n    } catch (err: any) {\n      setError(err.message || 'Failed to generate report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get reports by product ID\n   * @param productId Product ID\n   */\n  const getReportsByProduct = async (productId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      return await reportService.getReportsByProduct(productId);\n    } catch (err: any) {\n      setError(err.message || 'Failed to get reports');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get report by ID\n   * @param reportId Report ID\n   */\n  const getReportById = async (reportId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      return await reportService.getReportById(reportId);\n    } catch (err: any) {\n      setError(err.message || 'Failed to get report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Delete a report\n   * @param reportId Report ID\n   */\n  const deleteReport = async (reportId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await reportService.deleteReport(reportId);\n      await refreshReports();\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Clear error\n   */\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    reports,\n    userReports,\n    isLoading,\n    error,\n    generateReport,\n    getReportsByProduct,\n    getReportById,\n    deleteReport,\n    refreshReports,\n    clearError,\n  };\n\n  return <ReportContext.Provider value={value}>{children}</ReportContext.Provider>;\n};\n\n/**\n * Custom hook to use report context\n * @returns Report context\n */\nexport const useReports = () => useContext(ReportContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}