{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\contexts\\\\ReportContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport reportService from '../services/reportService';\nimport { useAuth } from './AuthContext';\n\n// Context interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default values\nconst ReportContext = /*#__PURE__*/createContext({\n  reports: [],\n  userReports: [],\n  isLoading: false,\n  error: null,\n  generateReport: async () => ({\n    report_id: '',\n    filename: '',\n    report_url: '',\n    report_type: ''\n  }),\n  getReportsByProduct: async () => [],\n  getReportById: async () => ({\n    _id: '',\n    product: {\n      _id: '',\n      name: ''\n    },\n    filename: '',\n    filepath: '',\n    created_by: {\n      _id: '',\n      name: '',\n      email: ''\n    },\n    report_type: 'product_details',\n    metadata: {},\n    created_at: '',\n    updated_at: ''\n  }),\n  deleteReport: async () => {},\n  refreshReports: async () => {},\n  clearError: () => {}\n});\n\n// Props interface\n\n/**\r\n * Report Provider Component\r\n * Provides report state and methods to the app\r\n */\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const [reports, setReports] = useState([]);\n  const [userReports, setUserReports] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user,\n    isAdmin,\n    isAuthenticated\n  } = useAuth();\n\n  // Load reports when user changes\n  useEffect(() => {\n    if (isAuthenticated) {\n      refreshReports();\n    }\n  }, [isAuthenticated, user === null || user === void 0 ? void 0 : user._id]);\n\n  /**\r\n   * Refresh reports data\r\n   */\n  const refreshReports = async () => {\n    console.log('refreshReports called, isAuthenticated:', isAuthenticated);\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping report refresh');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Fetching user reports...');\n      // Get user reports\n      const userReportsData = await reportService.getUserReports();\n      console.log('User reports fetched successfully:', userReportsData);\n      setUserReports(userReportsData);\n\n      // Get all reports for admin users\n      if (isAdmin) {\n        console.log('User is admin, fetching all reports...');\n        const allReports = await reportService.getAllReports();\n        console.log('All reports fetched successfully:', allReports);\n        setReports(allReports);\n      } else {\n        console.log('User is not admin, using user reports for reports state');\n        setReports(userReportsData);\n      }\n      console.log('Reports state updated successfully');\n    } catch (err) {\n      console.error('Error refreshing reports:', err);\n      setError(err.message || 'Failed to load reports');\n      console.error('Error loading reports:', err);\n    } finally {\n      setIsLoading(false);\n      console.log('refreshReports completed, isLoading set to false');\n    }\n  };\n\n  /**\r\n   * Generate a new report\r\n   * @param params Report generation parameters\r\n   */\n  const generateReport = async params => {\n    console.log('Generating report with params:', params);\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Calling reportService.generateReport');\n      const newReport = await reportService.generateReport(params);\n      console.log('Report generated successfully:', newReport);\n      console.log('Refreshing reports after generation');\n      await refreshReports();\n      console.log('Reports refreshed successfully');\n      return newReport;\n    } catch (err) {\n      console.error('Error generating report:', err);\n      setError(err.message || 'Failed to generate report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Get reports by product ID\r\n   * @param productId Product ID\r\n   */\n  const getReportsByProduct = async productId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      return await reportService.getReportsByProduct(productId);\n    } catch (err) {\n      setError(err.message || 'Failed to get reports');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Get report by ID\r\n   * @param reportId Report ID\r\n   */\n  const getReportById = async reportId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      return await reportService.getReportById(reportId);\n    } catch (err) {\n      setError(err.message || 'Failed to get report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Delete a report\r\n   * @param reportId Report ID\r\n   */\n  const deleteReport = async reportId => {\n    console.log('ReportContext: Deleting report with ID:', reportId);\n    setIsLoading(true);\n    setError(null);\n    console.log('ReportContext: Set loading state, cleared errors');\n    try {\n      console.log('ReportContext: Calling reportService.deleteReport');\n      await reportService.deleteReport(reportId);\n      console.log('ReportContext: Report deleted successfully');\n      console.log('ReportContext: Refreshing reports after deletion');\n      await refreshReports();\n      console.log('ReportContext: Reports refreshed successfully');\n    } catch (err) {\n      console.error('ReportContext: Error deleting report:', err);\n      setError(err.message || 'Failed to delete report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n      console.log('ReportContext: Loading state set to false');\n    }\n  };\n\n  /**\r\n   * Clear error\r\n   */\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    reports,\n    userReports,\n    isLoading,\n    error,\n    generateReport,\n    getReportsByProduct,\n    getReportById,\n    deleteReport,\n    refreshReports,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 10\n  }, this);\n};\n\n/**\r\n * Custom hook to use report context\r\n * @returns Report context\r\n */\n_s(ReportProvider, \"uQxZ1PTN2YaGmop+JlX+UEkPqaY=\", false, function () {\n  return [useAuth];\n});\n_c = ReportProvider;\nexport const useReports = () => {\n  _s2();\n  return useContext(ReportContext);\n};\n_s2(useReports, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","reportService","useAuth","jsxDEV","_jsxDEV","ReportContext","reports","userReports","isLoading","error","generateReport","report_id","filename","report_url","report_type","getReportsByProduct","getReportById","_id","product","name","filepath","created_by","email","metadata","created_at","updated_at","deleteReport","refreshReports","clearError","ReportProvider","children","_s","setReports","setUserReports","setIsLoading","setError","user","isAdmin","isAuthenticated","console","log","userReportsData","getUserReports","allReports","getAllReports","err","message","params","newReport","productId","reportId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReports","_s2","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/contexts/ReportContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport reportService, { Report, GenerateReportParams, GenerateReportResponse } from '../services/reportService';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Context interface\r\ninterface ReportContextType {\r\n  reports: Report[];\r\n  userReports: Report[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  generateReport: (params: GenerateReportParams) => Promise<GenerateReportResponse>;\r\n  getReportsByProduct: (productId: string) => Promise<Report[]>;\r\n  getReportById: (reportId: string) => Promise<Report>;\r\n  deleteReport: (reportId: string) => Promise<void>;\r\n  refreshReports: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\n// Create context with default values\r\nconst ReportContext = createContext<ReportContextType>({\r\n  reports: [],\r\n  userReports: [],\r\n  isLoading: false,\r\n  error: null,\r\n  generateReport: async () => ({ report_id: '', filename: '', report_url: '', report_type: '' }),\r\n  getReportsByProduct: async () => [],\r\n  getReportById: async () => ({\r\n    _id: '',\r\n    product: {\r\n      _id: '',\r\n      name: '',\r\n    },\r\n    filename: '',\r\n    filepath: '',\r\n    created_by: {\r\n      _id: '',\r\n      name: '',\r\n      email: '',\r\n    },\r\n    report_type: 'product_details',\r\n    metadata: {},\r\n    created_at: '',\r\n    updated_at: '',\r\n  }),\r\n  deleteReport: async () => {},\r\n  refreshReports: async () => {},\r\n  clearError: () => {},\r\n});\r\n\r\n// Props interface\r\ninterface ReportProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * Report Provider Component\r\n * Provides report state and methods to the app\r\n */\r\nexport const ReportProvider: React.FC<ReportProviderProps> = ({ children }) => {\r\n  const [reports, setReports] = useState<Report[]>([]);\r\n  const [userReports, setUserReports] = useState<Report[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user, isAdmin, isAuthenticated } = useAuth();\r\n\r\n  // Load reports when user changes\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      refreshReports();\r\n    }\r\n  }, [isAuthenticated, user?._id]);\r\n\r\n  /**\r\n   * Refresh reports data\r\n   */\r\n  const refreshReports = async () => {\r\n    console.log('refreshReports called, isAuthenticated:', isAuthenticated);\r\n    if (!isAuthenticated) {\r\n      console.log('User not authenticated, skipping report refresh');\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('Fetching user reports...');\r\n      // Get user reports\r\n      const userReportsData = await reportService.getUserReports();\r\n      console.log('User reports fetched successfully:', userReportsData);\r\n      setUserReports(userReportsData);\r\n      \r\n      // Get all reports for admin users\r\n      if (isAdmin) {\r\n        console.log('User is admin, fetching all reports...');\r\n        const allReports = await reportService.getAllReports();\r\n        console.log('All reports fetched successfully:', allReports);\r\n        setReports(allReports);\r\n      } else {\r\n        console.log('User is not admin, using user reports for reports state');\r\n        setReports(userReportsData);\r\n      }\r\n      console.log('Reports state updated successfully');\r\n    } catch (err: any) {\r\n      console.error('Error refreshing reports:', err);\r\n      setError(err.message || 'Failed to load reports');\r\n      console.error('Error loading reports:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n      console.log('refreshReports completed, isLoading set to false');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Generate a new report\r\n   * @param params Report generation parameters\r\n   */\r\n  const generateReport = async (params: GenerateReportParams) => {\r\n    console.log('Generating report with params:', params);\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('Calling reportService.generateReport');\r\n      const newReport = await reportService.generateReport(params);\r\n      console.log('Report generated successfully:', newReport);\r\n      \r\n      console.log('Refreshing reports after generation');\r\n      await refreshReports();\r\n      console.log('Reports refreshed successfully');\r\n      \r\n      return newReport;\r\n    } catch (err: any) {\r\n      console.error('Error generating report:', err);\r\n      setError(err.message || 'Failed to generate report');\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get reports by product ID\r\n   * @param productId Product ID\r\n   */\r\n  const getReportsByProduct = async (productId: string) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      return await reportService.getReportsByProduct(productId);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to get reports');\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get report by ID\r\n   * @param reportId Report ID\r\n   */\r\n  const getReportById = async (reportId: string) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      return await reportService.getReportById(reportId);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to get report');\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete a report\r\n   * @param reportId Report ID\r\n   */\r\n  const deleteReport = async (reportId: string) => {\r\n    console.log('ReportContext: Deleting report with ID:', reportId);\r\n    setIsLoading(true);\r\n    setError(null);\r\n    console.log('ReportContext: Set loading state, cleared errors');\r\n    \r\n    try {\r\n      console.log('ReportContext: Calling reportService.deleteReport');\r\n      await reportService.deleteReport(reportId);\r\n      console.log('ReportContext: Report deleted successfully');\r\n      \r\n      console.log('ReportContext: Refreshing reports after deletion');\r\n      await refreshReports();\r\n      console.log('ReportContext: Reports refreshed successfully');\r\n    } catch (err: any) {\r\n      console.error('ReportContext: Error deleting report:', err);\r\n      setError(err.message || 'Failed to delete report');\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n      console.log('ReportContext: Loading state set to false');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear error\r\n   */\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    reports,\r\n    userReports,\r\n    isLoading,\r\n    error,\r\n    generateReport,\r\n    getReportsByProduct,\r\n    getReportById,\r\n    deleteReport,\r\n    refreshReports,\r\n    clearError,\r\n  };\r\n\r\n  return <ReportContext.Provider value={value}>{children}</ReportContext.Provider>;\r\n};\r\n\r\n/**\r\n * Custom hook to use report context\r\n * @returns Report context\r\n */\r\nexport const useReports = () => useContext(ReportContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}