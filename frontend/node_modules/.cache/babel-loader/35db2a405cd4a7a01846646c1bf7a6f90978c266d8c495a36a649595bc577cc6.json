{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\pages\\\\ProductForm.tsx\",\n  _s = $RefreshSig$();\nimport jsPDF from 'jspdf';\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({\n  theme\n}) => theme.borderRadius.default};\n  box-shadow: ${({\n  theme\n}) => theme.shadows.medium};\n`;\n_c = FormContainer;\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n_c2 = FormHeader;\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  margin-bottom: 1rem;\n`;\n_c3 = FormTitle;\nconst FormDescription = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.lightText};\n  font-size: 1.125rem;\n`;\n_c4 = FormDescription;\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n_c5 = FormActions;\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n_c6 = LoadingOverlay;\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n_c7 = Spinner;\nconst basicFields = [{\n  id: 'name',\n  question_text: 'Product Name',\n  question_type: 'text',\n  required: true\n}, {\n  id: 'description',\n  question_text: 'Product Description',\n  question_type: 'text',\n  required: true,\n  tooltip: 'Provide a detailed description of your product, including its purpose and benefits.'\n}, {\n  id: 'category',\n  question_text: 'Product Category',\n  question_type: 'select',\n  required: true,\n  options: [{\n    value: 'supplements',\n    label: 'Supplements'\n  }, {\n    value: 'food',\n    label: 'Food & Beverage'\n  }, {\n    value: 'cosmetics',\n    label: 'Cosmetics'\n  }, {\n    value: 'personal_care',\n    label: 'Personal Care'\n  }, {\n    value: 'household',\n    label: 'Household Products'\n  }, {\n    value: 'other',\n    label: 'Other'\n  }]\n}];\nconst initialBasicValues = {\n  name: '',\n  description: '',\n  category: ''\n};\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required')\n});\nconst ProductForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [currentStep, setCurrentStep] = useState(1);\n  const [productData, setProductData] = useState(null);\n  const [aiQuestions, setAiQuestions] = useState([]);\n  const handleBasicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating AI questions...');\n    try {\n      const product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n      setProductData(product);\n      const generateRequest = {\n        product: product,\n        num_questions: 5\n      };\n      const aiResponse = await aiApi.generateQuestions(generateRequest);\n      if (aiResponse.success && aiResponse.data) {\n        const questions = aiResponse.data.questions.map((questionText, index) => ({\n          id: `q_${index}`,\n          question_text: questionText,\n          question_type: 'text',\n          required: false,\n          is_ai_generated: true\n        }));\n        setAiQuestions(questions);\n        setCurrentStep(2);\n      } else {\n        alert(`Error: ${aiResponse.error || 'Failed to generate questions. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n  const handleQuestionsSubmit = async (values, {\n    setSubmitting\n  }) => {\n    if (!productData) {\n      alert('Product data is missing. Please go back and try again.');\n      return;\n    }\n    setIsLoading(true);\n    setLoadingMessage('Submitting data and generating transparency report...');\n    try {\n      const answeredQuestions = aiQuestions.map(q => {\n        var _q$required;\n        return {\n          question_text: q.question_text,\n          answer: values[q.id] || '',\n          question_type: q.question_type,\n          is_ai_generated: true,\n          required: (_q$required = q.required) !== null && _q$required !== void 0 ? _q$required : false\n        };\n      });\n      const productPayload = {\n        ...productData,\n        questions: answeredQuestions\n      };\n      const response = await productApi.create(productPayload);\n      if (response.success && 'data' in response) {\n        const createdProduct = response.data;\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Product Transparency Report', 20, 20);\n        doc.setFontSize(12);\n        doc.text(`Name: ${createdProduct.name}`, 20, 40);\n        doc.text(`Description: ${createdProduct.description}`, 20, 50);\n        doc.text(`Category: ${createdProduct.category}`, 20, 60);\n        let y = 80;\n        answeredQuestions.forEach(({\n          question_text,\n          answer\n        }) => {\n          doc.text(`${question_text}: ${answer}`, 20, y);\n          y += 10;\n        });\n        const blobUrl = doc.output('bloburl');\n        window.open(blobUrl, '_blank');\n        navigate(`/product/${createdProduct._id}`);\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while submitting the product.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n  const initialQuestionsValues = useMemo(() => {\n    const values = {};\n    aiQuestions.forEach(question => {\n      values[question.id] = '';\n    });\n    return values;\n  }, [aiQuestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n        children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n          children: \"Product Submission Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n          children: currentStep === 1 ? 'Complete the form below to generate AI questions about your product.' : 'Please answer the following AI-generated questions about your product.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), currentStep === 1 ? /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialBasicValues,\n        validationSchema: basicValidation,\n        onSubmit: handleBasicSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [basicFields.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id,\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: Array.isArray(field.options) ? field.options.map(option => typeof option === 'string' ? {\n              value: option,\n              label: option\n            } : option) : undefined,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialQuestionsValues,\n        onSubmit: handleQuestionsSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [aiQuestions.map(question => /*#__PURE__*/_jsxDEV(FormField, {\n            label: question.question_text,\n            name: question.id,\n            type: \"textarea\",\n            required: question.required\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"outline\",\n              onClick: () => setCurrentStep(1),\n              disabled: isSubmitting,\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductForm, \"cJDDlSy2CIYX7uNaBoAkRCGs3L0=\", false, function () {\n  return [useNavigate];\n});\n_c8 = ProductForm;\nexport default ProductForm;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"FormContainer\");\n$RefreshReg$(_c2, \"FormHeader\");\n$RefreshReg$(_c3, \"FormTitle\");\n$RefreshReg$(_c4, \"FormDescription\");\n$RefreshReg$(_c5, \"FormActions\");\n$RefreshReg$(_c6, \"LoadingOverlay\");\n$RefreshReg$(_c7, \"Spinner\");\n$RefreshReg$(_c8, \"ProductForm\");","map":{"version":3,"names":["jsPDF","React","useState","useMemo","useNavigate","styled","Formik","Form","Yup","FormField","Button","productApi","aiApi","jsxDEV","_jsxDEV","FormContainer","div","theme","borderRadius","default","shadows","medium","_c","FormHeader","_c2","FormTitle","h1","colors","primary","_c3","FormDescription","p","lightText","_c4","FormActions","_c5","LoadingOverlay","_c6","Spinner","_c7","basicFields","id","question_text","question_type","required","tooltip","options","value","label","initialBasicValues","name","description","category","basicValidation","object","string","ProductForm","_s","navigate","isLoading","setIsLoading","loadingMessage","setLoadingMessage","currentStep","setCurrentStep","productData","setProductData","aiQuestions","setAiQuestions","handleBasicSubmit","values","setSubmitting","product","ingredients","manufacturing_location","certifications","additional_info","generateRequest","num_questions","aiResponse","generateQuestions","success","data","questions","map","questionText","index","is_ai_generated","alert","error","console","handleQuestionsSubmit","answeredQuestions","q","_q$required","answer","productPayload","response","create","createdProduct","doc","setFontSize","text","y","forEach","blobUrl","output","window","open","_id","initialQuestionsValues","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","validationSchema","onSubmit","validateOnChange","validateOnBlur","isSubmitting","field","type","Array","isArray","option","undefined","disabled","variant","onClick","_c8","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/pages/ProductForm.tsx"],"sourcesContent":["import jsPDF from 'jspdf';\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { FormValues, Product, Question, GenerateQuestionsRequest } from '../types';\n\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({ theme }) => theme.borderRadius.default};\n  box-shadow: ${({ theme }) => theme.shadows.medium};\n`;\n\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 1rem;\n`;\n\nconst FormDescription = styled.p`\n  color: ${({ theme }) => theme.colors.lightText};\n  font-size: 1.125rem;\n`;\n\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst basicFields: Question[] = [\n  {\n    id: 'name',\n    question_text: 'Product Name',\n    question_type: 'text',\n    required: true,\n  },\n  {\n    id: 'description',\n    question_text: 'Product Description',\n    question_type: 'text',\n    required: true,\n    tooltip: 'Provide a detailed description of your product, including its purpose and benefits.',\n  },\n  {\n    id: 'category',\n    question_text: 'Product Category',\n    question_type: 'select',\n    required: true,\n    options: [\n      { value: 'supplements', label: 'Supplements' },\n      { value: 'food', label: 'Food & Beverage' },\n      { value: 'cosmetics', label: 'Cosmetics' },\n      { value: 'personal_care', label: 'Personal Care' },\n      { value: 'household', label: 'Household Products' },\n      { value: 'other', label: 'Other' },\n    ],\n  },\n];\n\nconst initialBasicValues: FormValues = {\n  name: '',\n  description: '',\n  category: '',\n};\n\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required'),\n});\n\nconst ProductForm: React.FC = () => {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [currentStep, setCurrentStep] = useState(1);\n  const [productData, setProductData] = useState<Product | null>(null);\n  const [aiQuestions, setAiQuestions] = useState<Question[]>([]);\n\n  const handleBasicSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating AI questions...');\n\n    try {\n      const product: Product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {},\n      };\n\n      setProductData(product);\n\n      const generateRequest: GenerateQuestionsRequest = {\n        product: product,\n        num_questions: 5\n      };\n\n      const aiResponse = await aiApi.generateQuestions(generateRequest);\n\n      if (aiResponse.success && aiResponse.data) {\n        const questions: Question[] = aiResponse.data.questions.map((questionText, index) => ({\n          id: `q_${index}`,\n          question_text: questionText,\n          question_type: 'text',\n          required: false,\n          is_ai_generated: true\n        }));\n\n        setAiQuestions(questions);\n        setCurrentStep(2);\n      } else {\n        alert(`Error: ${aiResponse.error || 'Failed to generate questions. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  const handleQuestionsSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    if (!productData) {\n      alert('Product data is missing. Please go back and try again.');\n      return;\n    }\n\n    setIsLoading(true);\n    setLoadingMessage('Submitting data and generating transparency report...');\n\n    try {\n      const answeredQuestions: Question[] = aiQuestions.map((q) => ({\n        question_text: q.question_text,\n        answer: values[q.id!] || '',\n        question_type: q.question_type,\n        is_ai_generated: true,\n        required: q.required ?? false,\n      }));\n\n      const productPayload = {\n        ...productData,\n        questions: answeredQuestions,\n      };\n\n      const response = await productApi.create(productPayload);\n\n      if (response.success && 'data' in response) {\n        const createdProduct = response.data as Product & { _id: string };\n\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Product Transparency Report', 20, 20);\n\n        doc.setFontSize(12);\n        doc.text(`Name: ${createdProduct.name}`, 20, 40);\n        doc.text(`Description: ${createdProduct.description}`, 20, 50);\n        doc.text(`Category: ${createdProduct.category}`, 20, 60);\n\n        let y = 80;\n        answeredQuestions.forEach(({ question_text, answer }) => {\n          doc.text(`${question_text}: ${answer}`, 20, y);\n          y += 10;\n        });\n\n        const blobUrl = doc.output('bloburl');\n        window.open(blobUrl, '_blank');\n\n        navigate(`/product/${createdProduct._id}`);\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while submitting the product.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  const initialQuestionsValues = useMemo(() => {\n    const values: FormValues = {};\n    aiQuestions.forEach(question => {\n      values[question.id!] = '';\n    });\n    return values;\n  }, [aiQuestions]);\n\n  return (\n    <div className=\"container\">\n      <FormContainer>\n        <FormHeader>\n          <FormTitle>Product Submission Form</FormTitle>\n          <FormDescription>\n            {currentStep === 1 \n              ? 'Complete the form below to generate AI questions about your product.'\n              : 'Please answer the following AI-generated questions about your product.'}\n          </FormDescription>\n        </FormHeader>\n\n        {currentStep === 1 ? (\n          <Formik\n            initialValues={initialBasicValues}\n            validationSchema={basicValidation}\n            onSubmit={handleBasicSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {basicFields.map((field) => (\n                  <FormField\n                    key={field.id}\n                    label={field.question_text}\n                    name={field.id!}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={\n                      Array.isArray(field.options)\n                        ? field.options.map((option) =>\n                            typeof option === 'string'\n                              ? { value: option, label: option }\n                              : option\n                          )\n                        : undefined\n                    }\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Next\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        ) : (\n          <Formik\n            initialValues={initialQuestionsValues}\n            onSubmit={handleQuestionsSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {aiQuestions.map((question) => (\n                  <FormField\n                    key={question.id}\n                    label={question.question_text}\n                    name={question.id!}\n                    type=\"textarea\"\n                    required={question.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setCurrentStep(1)}\n                    disabled={isSubmitting}\n                  >\n                    Back\n                  </Button>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Submit\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n\n        {isLoading && (\n          <LoadingOverlay>\n            <Spinner />\n            <p>{loadingMessage}</p>\n          </LoadingOverlay>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default ProductForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}