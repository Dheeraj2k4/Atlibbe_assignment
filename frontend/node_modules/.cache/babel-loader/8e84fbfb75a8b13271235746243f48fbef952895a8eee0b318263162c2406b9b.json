{"ast":null,"code":"import axios from'axios';import{API_URL}from'../config';import authService from'./authService';// Types\n/**\n * Report Service\n * Handles report generation and management\n */const reportService={/**\n   * Generate a report for a product\n   * @param params Report generation parameters\n   * @returns Generated report data\n   */async generateReport(params){try{const{productId,...data}=params;const response=await axios.post(`${API_URL}/reports/generate/${productId}`,data,{headers:authService.authHeader()});if(response.data.success){return response.data.data;}throw new Error('Failed to generate report');}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Failed to generate report');}},/**\n   * Get all reports (admin only)\n   * @returns List of all reports\n   */async getAllReports(){try{const response=await axios.get(`${API_URL}/reports`,{headers:authService.authHeader()});if(response.data.success){return response.data.data;}throw new Error('Failed to get reports');}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to get reports');}},/**\n   * Get reports by product ID\n   * @param productId Product ID\n   * @returns List of reports for the product\n   */async getReportsByProduct(productId){try{const response=await axios.get(`${API_URL}/reports/product/${productId}`,{headers:authService.authHeader()});if(response.data.success){return response.data.data;}throw new Error('Failed to get product reports');}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to get product reports');}},/**\n   * Get reports created by the current user\n   * @returns List of user's reports\n   */async getUserReports(){try{const response=await axios.get(`${API_URL}/reports/user`,{headers:authService.authHeader()});if(response.data.success){return response.data.data;}throw new Error('Failed to get user reports');}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Failed to get user reports');}},/**\n   * Get report by ID\n   * @param reportId Report ID\n   * @returns Report data\n   */async getReportById(reportId){try{const response=await axios.get(`${API_URL}/reports/${reportId}`,{headers:authService.authHeader()});if(response.data.success){return response.data.data;}throw new Error('Failed to get report');}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'Failed to get report');}},/**\n   * Delete report\n   * @param reportId Report ID\n   * @returns Success message\n   */async deleteReport(reportId){try{const response=await axios.delete(`${API_URL}/reports/${reportId}`,{headers:authService.authHeader()});if(response.data.success){return response.data.message;}throw new Error('Failed to delete report');}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||'Failed to delete report');}},/**\n   * Get report download URL\n   * @param filename Report filename\n   * @returns Full URL to download the report\n   */getReportDownloadUrl(filename){return`${API_URL}/public/reports/${filename}`;}};export default reportService;","map":{"version":3,"names":["axios","API_URL","authService","reportService","generateReport","params","productId","data","response","post","headers","authHeader","success","Error","error","_error$response","_error$response$data","getAllReports","get","_error$response2","_error$response2$data","getReportsByProduct","_error$response3","_error$response3$data","getUserReports","_error$response4","_error$response4$data","getReportById","reportId","_error$response5","_error$response5$data","deleteReport","delete","message","_error$response6","_error$response6$data","getReportDownloadUrl","filename"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/services/reportService.ts"],"sourcesContent":["import axios from 'axios';\nimport { API_URL } from '../config';\nimport authService from './authService';\n\n// Types\nexport interface Report {\n  _id: string;\n  product: {\n    _id: string;\n    name: string;\n    description?: string;\n  };\n  filename: string;\n  filepath: string;\n  created_by: {\n    _id: string;\n    name: string;\n    email: string;\n  };\n  report_type: 'product_details' | 'transparency' | 'certification' | 'custom';\n  metadata: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface GenerateReportParams {\n  productId: string;\n  report_type?: 'product_details' | 'transparency' | 'certification' | 'custom';\n  metadata?: Record<string, any>;\n}\n\nexport interface GenerateReportResponse {\n  report_id: string;\n  filename: string;\n  report_url: string;\n  report_type: string;\n}\n\n/**\n * Report Service\n * Handles report generation and management\n */\nconst reportService = {\n  /**\n   * Generate a report for a product\n   * @param params Report generation parameters\n   * @returns Generated report data\n   */\n  async generateReport(params: GenerateReportParams): Promise<GenerateReportResponse> {\n    try {\n      const { productId, ...data } = params;\n      const response = await axios.post(\n        `${API_URL}/reports/generate/${productId}`,\n        data,\n        {\n          headers: authService.authHeader(),\n        }\n      );\n\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to generate report');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to generate report');\n    }\n  },\n\n  /**\n   * Get all reports (admin only)\n   * @returns List of all reports\n   */\n  async getAllReports(): Promise<Report[]> {\n    try {\n      const response = await axios.get(`${API_URL}/reports`, {\n        headers: authService.authHeader(),\n      });\n\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to get reports');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to get reports');\n    }\n  },\n\n  /**\n   * Get reports by product ID\n   * @param productId Product ID\n   * @returns List of reports for the product\n   */\n  async getReportsByProduct(productId: string): Promise<Report[]> {\n    try {\n      const response = await axios.get(`${API_URL}/reports/product/${productId}`, {\n        headers: authService.authHeader(),\n      });\n\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to get product reports');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to get product reports');\n    }\n  },\n\n  /**\n   * Get reports created by the current user\n   * @returns List of user's reports\n   */\n  async getUserReports(): Promise<Report[]> {\n    try {\n      const response = await axios.get(`${API_URL}/reports/user`, {\n        headers: authService.authHeader(),\n      });\n\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to get user reports');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to get user reports');\n    }\n  },\n\n  /**\n   * Get report by ID\n   * @param reportId Report ID\n   * @returns Report data\n   */\n  async getReportById(reportId: string): Promise<Report> {\n    try {\n      const response = await axios.get(`${API_URL}/reports/${reportId}`, {\n        headers: authService.authHeader(),\n      });\n\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to get report');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to get report');\n    }\n  },\n\n  /**\n   * Delete report\n   * @param reportId Report ID\n   * @returns Success message\n   */\n  async deleteReport(reportId: string): Promise<string> {\n    try {\n      const response = await axios.delete(`${API_URL}/reports/${reportId}`, {\n        headers: authService.authHeader(),\n      });\n\n      if (response.data.success) {\n        return response.data.message;\n      }\n      throw new Error('Failed to delete report');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to delete report');\n    }\n  },\n\n  /**\n   * Get report download URL\n   * @param filename Report filename\n   * @returns Full URL to download the report\n   */\n  getReportDownloadUrl(filename: string): string {\n    return `${API_URL}/public/reports/${filename}`;\n  },\n};\n\nexport default reportService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}