{"ast":null,"code":"import React from'react';import{Navigate,Outlet,useLocation}from'react-router-dom';import{useAuth}from'../../contexts/AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * Protected Route Component\n * Restricts access to authenticated users\n * Optionally restricts access to admin users\n */const ProtectedRoute=_ref=>{let{requireAdmin=false}=_ref;const{isAuthenticated,isAdmin,isLoading}=useAuth();const location=useLocation();// Show loading state\nif(isLoading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}// Check if user is authenticated\nif(!isAuthenticated){// Redirect to login page with return URL\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}// Check if admin access is required\nif(requireAdmin&&!isAdmin){// Redirect to unauthorized page\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/unauthorized\",replace:true});}// Render the protected content\nreturn/*#__PURE__*/_jsx(Outlet,{});};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","Outlet","useLocation","useAuth","jsx","_jsx","ProtectedRoute","_ref","requireAdmin","isAuthenticated","isAdmin","isLoading","location","children","to","state","from","replace"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/components/auth/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\n\ninterface ProtectedRouteProps {\n  requireAdmin?: boolean;\n}\n\n/**\n * Protected Route Component\n * Restricts access to authenticated users\n * Optionally restricts access to admin users\n */\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ requireAdmin = false }) => {\n  const { isAuthenticated, isAdmin, isLoading } = useAuth();\n  const location = useLocation();\n\n  // Show loading state\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  // Check if user is authenticated\n  if (!isAuthenticated) {\n    // Redirect to login page with return URL\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // Check if admin access is required\n  if (requireAdmin && !isAdmin) {\n    // Redirect to unauthorized page\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  // Render the protected content\n  return <Outlet />;\n};\n\nexport default ProtectedRoute;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,MAAM,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,OAASC,OAAO,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAMrD;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAA6C,CAAGC,IAAA,EAA8B,IAA7B,CAAEC,YAAY,CAAG,KAAM,CAAC,CAAAD,IAAA,CAC7E,KAAM,CAAEE,eAAe,CAAEC,OAAO,CAAEC,SAAU,CAAC,CAAGR,OAAO,CAAC,CAAC,CACzD,KAAM,CAAAS,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAE9B;AACA,GAAIS,SAAS,CAAE,CACb,mBAAON,IAAA,QAAAQ,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA;AACA,GAAI,CAACJ,eAAe,CAAE,CACpB;AACA,mBAAOJ,IAAA,CAACL,QAAQ,EAACc,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,QAAS,CAAE,CAACK,OAAO,MAAE,CAAC,CACpE,CAEA;AACA,GAAIT,YAAY,EAAI,CAACE,OAAO,CAAE,CAC5B;AACA,mBAAOL,IAAA,CAACL,QAAQ,EAACc,EAAE,CAAC,eAAe,CAACG,OAAO,MAAE,CAAC,CAChD,CAEA;AACA,mBAAOZ,IAAA,CAACJ,MAAM,GAAE,CAAC,CACnB,CAAC,CAED,cAAe,CAAAK,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}