{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\pages\\\\ProductForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({\n  theme\n}) => theme.borderRadius.default};\n  box-shadow: ${({\n  theme\n}) => theme.shadows.medium};\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    padding: 1.5rem;\n  }\n`;\n_c = FormContainer;\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n_c2 = FormHeader;\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  margin-bottom: 1rem;\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    font-size: 1.75rem;\n  }\n`;\n_c3 = FormTitle;\nconst FormDescription = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.lightText};\n  font-size: 1.125rem;\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    font-size: 1rem;\n  }\n`;\n_c4 = FormDescription;\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n_c5 = FormActions;\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n_c6 = LoadingOverlay;\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n_c7 = Spinner;\nconst basicFields = [{\n  id: 'name',\n  question_text: 'Product Name',\n  question_type: 'text',\n  required: true\n}, {\n  id: 'description',\n  question_text: 'Product Description',\n  question_type: 'text',\n  required: true,\n  tooltip: 'Provide a detailed description of your product, including its purpose and benefits.'\n}, {\n  id: 'category',\n  question_text: 'Product Category',\n  question_type: 'select',\n  required: true,\n  options: [{\n    value: 'supplements',\n    label: 'Supplements'\n  }, {\n    value: 'food',\n    label: 'Food & Beverage'\n  }, {\n    value: 'cosmetics',\n    label: 'Cosmetics'\n  }, {\n    value: 'personal_care',\n    label: 'Personal Care'\n  }, {\n    value: 'household',\n    label: 'Household Products'\n  }, {\n    value: 'other',\n    label: 'Other'\n  }]\n}];\nconst initialBasicValues = {\n  name: '',\n  description: '',\n  category: ''\n};\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required')\n});\nconst ProductForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [basicInfo, setBasicInfo] = useState(null);\n  const [dynamicQuestions, setDynamicQuestions] = useState([]);\n  const handleBasicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating follow-up questions...');\n    try {\n      const product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        // Send as empty string instead of array to match API expectation\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n      const response = await aiApi.generateQuestions({\n        product: {\n          name: values.name,\n          description: values.description,\n          category: values.category,\n          ingredients: '',\n          // Send as empty string instead of array to match API expectation\n          manufacturing_location: '',\n          certifications: [],\n          additional_info: {}\n        },\n        num_questions: 5 // Request 5 questions from the AI service\n      });\n      if (response.success && response.data && Array.isArray(response.data.questions) && response.data.questions.length > 0) {\n        let mappedQuestions;\n        if (typeof response.data.questions[0] === 'string') {\n          mappedQuestions = response.data.questions.map((text, index) => ({\n            id: `q_${index}`,\n            question_text: text,\n            question_type: 'text',\n            required: true\n          }));\n        } else if (typeof response.data.questions[0] === 'object' && response.data.questions[0].question_text) {\n          mappedQuestions = response.data.questions.map((q, index) => ({\n            id: q.id || `q_${index}`,\n            question_text: q.question_text,\n            question_type: q.question_type || 'text',\n            required: q.required !== undefined ? q.required : true\n          }));\n        } else {\n          alert('Unexpected question format from AI service.');\n          setIsLoading(false);\n          setSubmitting(false);\n          return;\n        }\n        setBasicInfo(values);\n        setDynamicQuestions(mappedQuestions);\n        setStep(2);\n      } else {\n        alert('Failed to generate follow-up questions.');\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n  const handleDynamicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Submitting your product information...');\n    try {\n      // Create a product object with basic info\n      const product = {\n        name: (basicInfo === null || basicInfo === void 0 ? void 0 : basicInfo.name) || '',\n        description: (basicInfo === null || basicInfo === void 0 ? void 0 : basicInfo.description) || '',\n        category: (basicInfo === null || basicInfo === void 0 ? void 0 : basicInfo.category) || '',\n        ingredients: '',\n        // Empty string for ingredients initially\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n\n      // Extract ingredients from answers if any question is about ingredients\n      const ingredientQuestions = dynamicQuestions.filter(q => q.question_text.toLowerCase().includes('ingredient'));\n      if (ingredientQuestions.length > 0) {\n        const ingredientAnswers = ingredientQuestions.map(q => {\n          const key = q.id || q.question_text;\n          return values[key];\n        }).filter(Boolean);\n        if (ingredientAnswers.length > 0) {\n          // Join all ingredient answers into a comma-separated string\n          product.ingredients = ingredientAnswers.join(', ');\n        }\n      }\n\n      // Create an array of questions with answers for the backend\n      const questions = dynamicQuestions.map(q => {\n        const key = q.id || q.question_text;\n        return {\n          question_text: q.question_text,\n          answer: values[key],\n          question_type: q.question_type,\n          is_ai_generated: true\n        };\n      });\n\n      // Also store answers in additional_info for compatibility\n      dynamicQuestions.forEach(q => {\n        const key = q.id || q.question_text;\n        product.additional_info[key] = values[key];\n      });\n\n      // Add questions to the product object\n      const productWithQuestions = {\n        ...product,\n        questions: questions\n      };\n      const response = await productApi.createProduct(productWithQuestions);\n      if (response.success && response.data) {\n        setLoadingMessage('Generating transparency report...');\n\n        // Navigate to the report page\n        navigate(`/report/${response.data.id}`);\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n  const dynamicValidation = useMemo(() => {\n    const shape = {};\n    dynamicQuestions.forEach(q => {\n      shape[q.id || q.question_text] = q.required ? Yup.string().required('This field is required') : Yup.string();\n    });\n    return Yup.object(shape);\n  }, [dynamicQuestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n        children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n          children: \"Product Submission Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n          children: \"Complete the form below to generate a transparency report for your product.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), step === 1 && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialBasicValues,\n        validationSchema: basicValidation,\n        onSubmit: handleBasicSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [basicFields.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id,\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: Array.isArray(field.options) ? field.options.map(option => typeof option === 'string' ? {\n              value: option,\n              label: option\n            } : option) : undefined,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), step === 2 && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: dynamicQuestions.reduce((acc, q) => {\n          acc[q.id || q.question_text] = '';\n          return acc;\n        }, {}),\n        validationSchema: dynamicValidation,\n        onSubmit: handleDynamicSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [dynamicQuestions.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id || field.question_text,\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: Array.isArray(field.options) ? field.options.map(option => typeof option === 'string' ? {\n              value: option,\n              label: option\n            } : option) : undefined,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id || field.question_text, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductForm, \"YjQtuZCqs44wnPZtsRC6X9gXr54=\", false, function () {\n  return [useNavigate];\n});\n_c8 = ProductForm;\nexport default ProductForm;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"FormContainer\");\n$RefreshReg$(_c2, \"FormHeader\");\n$RefreshReg$(_c3, \"FormTitle\");\n$RefreshReg$(_c4, \"FormDescription\");\n$RefreshReg$(_c5, \"FormActions\");\n$RefreshReg$(_c6, \"LoadingOverlay\");\n$RefreshReg$(_c7, \"Spinner\");\n$RefreshReg$(_c8, \"ProductForm\");","map":{"version":3,"names":["React","useState","useMemo","useNavigate","styled","Formik","Form","Yup","FormField","Button","productApi","aiApi","jsxDEV","_jsxDEV","FormContainer","div","theme","borderRadius","default","shadows","medium","breakpoints","md","_c","FormHeader","_c2","FormTitle","h1","colors","primary","_c3","FormDescription","p","lightText","_c4","FormActions","_c5","LoadingOverlay","_c6","Spinner","_c7","basicFields","id","question_text","question_type","required","tooltip","options","value","label","initialBasicValues","name","description","category","basicValidation","object","string","ProductForm","_s","navigate","step","setStep","isLoading","setIsLoading","loadingMessage","setLoadingMessage","basicInfo","setBasicInfo","dynamicQuestions","setDynamicQuestions","handleBasicSubmit","values","setSubmitting","product","ingredients","manufacturing_location","certifications","additional_info","response","generateQuestions","num_questions","success","data","Array","isArray","questions","length","mappedQuestions","map","text","index","q","undefined","alert","error","console","handleDynamicSubmit","ingredientQuestions","filter","toLowerCase","includes","ingredientAnswers","key","Boolean","join","answer","is_ai_generated","forEach","productWithQuestions","createProduct","dynamicValidation","shape","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","validationSchema","onSubmit","validateOnChange","validateOnBlur","isSubmitting","field","type","option","disabled","reduce","acc","_c8","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/pages/ProductForm.tsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { FormStep, FormValues, Product, Question } from '../types';\n\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({ theme }) => theme.borderRadius.default};\n  box-shadow: ${({ theme }) => theme.shadows.medium};\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    padding: 1.5rem;\n  }\n`;\n\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 1rem;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 1.75rem;\n  }\n`;\n\nconst FormDescription = styled.p`\n  color: ${({ theme }) => theme.colors.lightText};\n  font-size: 1.125rem;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 1rem;\n  }\n`;\n\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst basicFields: Question[] = [\n  {\n    id: 'name',\n    question_text: 'Product Name',\n    question_type: 'text',\n    required: true,\n  },\n  {\n    id: 'description',\n    question_text: 'Product Description',\n    question_type: 'text',\n    required: true,\n    tooltip: 'Provide a detailed description of your product, including its purpose and benefits.',\n  },\n  {\n    id: 'category',\n    question_text: 'Product Category',\n    question_type: 'select',\n    required: true,\n    options: [\n      { value: 'supplements', label: 'Supplements' },\n      { value: 'food', label: 'Food & Beverage' },\n      { value: 'cosmetics', label: 'Cosmetics' },\n      { value: 'personal_care', label: 'Personal Care' },\n      { value: 'household', label: 'Household Products' },\n      { value: 'other', label: 'Other' },\n    ],\n  },\n];\n\nconst initialBasicValues: FormValues = {\n  name: '',\n  description: '',\n  category: '',\n};\n\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required'),\n});\n\nconst ProductForm: React.FC = () => {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [basicInfo, setBasicInfo] = useState<FormValues | null>(null);\n  const [dynamicQuestions, setDynamicQuestions] = useState<Question[]>([]);\n\n  const handleBasicSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating follow-up questions...');\n\n    try {\n      const product: Product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '', // Send as empty string instead of array to match API expectation\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {},\n      };\n\n      const response = await aiApi.generateQuestions({\n        product: {\n          name: values.name,\n          description: values.description,\n          category: values.category,\n          ingredients: '', // Send as empty string instead of array to match API expectation\n          manufacturing_location: '',\n          certifications: [],\n          additional_info: {},\n        },\n        num_questions: 5, // Request 5 questions from the AI service\n      });\n      \n\n      if (\n        response.success &&\n        response.data &&\n        Array.isArray(response.data.questions) &&\n        response.data.questions.length > 0\n      ) {\n        let mappedQuestions: Question[];\n        if (typeof response.data.questions[0] === 'string') {\n          mappedQuestions = (response.data.questions as unknown as string[]).map((text, index) => ({\n            id: `q_${index}`,\n            question_text: text,\n            question_type: 'text',\n            required: true,\n          }));\n        } else if (typeof response.data.questions[0] === 'object' && response.data.questions[0].question_text) {\n          mappedQuestions = response.data.questions.map((q: any, index: number) => ({\n            id: q.id || `q_${index}`,\n            question_text: q.question_text,\n            question_type: q.question_type || 'text',\n            required: q.required !== undefined ? q.required : true,\n          }));\n        } else {\n          alert('Unexpected question format from AI service.');\n          setIsLoading(false);\n          setSubmitting(false);\n          return;\n        }\n        setBasicInfo(values);\n        setDynamicQuestions(mappedQuestions);\n        setStep(2);\n      } else {\n        alert('Failed to generate follow-up questions.');\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  const handleDynamicSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    setIsLoading(true);\n    setLoadingMessage('Submitting your product information...');\n    try {\n      // Create a product object with basic info\n      const product: Product = {\n        name: basicInfo?.name || '',\n        description: basicInfo?.description || '',\n        category: basicInfo?.category || '',\n        ingredients: '', // Empty string for ingredients initially\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {},\n      };\n      \n      // Extract ingredients from answers if any question is about ingredients\n      const ingredientQuestions = dynamicQuestions.filter(q => \n        q.question_text.toLowerCase().includes('ingredient'));\n      \n      if (ingredientQuestions.length > 0) {\n        const ingredientAnswers = ingredientQuestions.map(q => {\n          const key = q.id || q.question_text;\n          return values[key];\n        }).filter(Boolean);\n        \n        if (ingredientAnswers.length > 0) {\n          // Join all ingredient answers into a comma-separated string\n          product.ingredients = ingredientAnswers.join(', ');\n        }\n      }\n\n      // Create an array of questions with answers for the backend\n      const questions = dynamicQuestions.map(q => {\n        const key = q.id || q.question_text;\n        return {\n          question_text: q.question_text,\n          answer: values[key],\n          question_type: q.question_type,\n          is_ai_generated: true\n        };\n      });\n\n      // Also store answers in additional_info for compatibility\n      dynamicQuestions.forEach((q) => {\n        const key = q.id || q.question_text;\n        product.additional_info![key] = values[key];\n      });\n\n      // Add questions to the product object\n      const productWithQuestions = {\n        ...product,\n        questions: questions\n      };\n\n      const response = await productApi.createProduct(productWithQuestions);\n      if (response.success && response.data) {\n        setLoadingMessage('Generating transparency report...');\n        \n        // Navigate to the report page\n        navigate(`/report/${response.data.id}`);\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product. Please try again.'}`);\n      }\n    } catch (error) {\n      console.error(error);\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  const dynamicValidation = useMemo(() => {\n    const shape: Record<string, any> = {};\n    dynamicQuestions.forEach((q) => {\n      shape[q.id || q.question_text] = q.required\n        ? Yup.string().required('This field is required')\n        : Yup.string();\n    });\n    return Yup.object(shape);\n  }, [dynamicQuestions]);\n\n  return (\n    <div className=\"container\">\n      <FormContainer>\n        <FormHeader>\n          <FormTitle>Product Submission Form</FormTitle>\n          <FormDescription>\n            Complete the form below to generate a transparency report for your product.\n          </FormDescription>\n        </FormHeader>\n\n        {step === 1 && (\n          <Formik\n            initialValues={initialBasicValues}\n            validationSchema={basicValidation}\n            onSubmit={handleBasicSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {basicFields.map((field) => (\n                  <FormField\n                    key={field.id}\n                    label={field.question_text}\n                    name={field.id!}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={\n                      Array.isArray(field.options)\n                        ? field.options.map((option) =>\n                            typeof option === 'string'\n                              ? { value: option, label: option }\n                              : option\n                          )\n                        : undefined\n                    }\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Next\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n\n        {step === 2 && (\n          <Formik\n            initialValues={dynamicQuestions.reduce((acc, q) => {\n              acc[q.id || q.question_text] = '';\n              return acc;\n            }, {} as FormValues)}\n            validationSchema={dynamicValidation}\n            onSubmit={handleDynamicSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {dynamicQuestions.map((field) => (\n                  <FormField\n                    key={field.id || field.question_text}\n                    label={field.question_text}\n                    name={field.id || field.question_text}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={\n                      Array.isArray(field.options)\n                        ? field.options.map((option) =>\n                            typeof option === 'string'\n                              ? { value: option, label: option }\n                              : option\n                          )\n                        : undefined\n                    }\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Submit\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n\n        {isLoading && (\n          <LoadingOverlay>\n            <Spinner />\n            <p>{loadingMessage}</p>\n          </LoadingOverlay>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default ProductForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}