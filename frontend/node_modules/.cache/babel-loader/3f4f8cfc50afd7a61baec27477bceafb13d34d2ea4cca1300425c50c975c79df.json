{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\pages\\\\ProductForm.tsx\",\n  _s = $RefreshSig$();\nimport jsPDF from 'jspdf';\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Styled components\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({\n  theme\n}) => theme.borderRadius.default};\n  box-shadow: ${({\n  theme\n}) => theme.shadows.medium};\n`;\n_c = FormContainer;\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n_c2 = FormHeader;\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  margin-bottom: 1rem;\n`;\n_c3 = FormTitle;\nconst FormDescription = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.lightText};\n  font-size: 1.125rem;\n`;\n_c4 = FormDescription;\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n_c5 = FormActions;\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0; left: 0; right: 0; bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n  flex-direction: column;\n`;\n_c6 = LoadingOverlay;\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-top: 4px solid white;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\n// Step 1 questions (basic)\n_c7 = Spinner;\nconst basicFields = [{\n  id: 'name',\n  question_text: 'Product Name',\n  question_type: 'text',\n  required: true\n}, {\n  id: 'description',\n  question_text: 'Product Description',\n  question_type: 'text',\n  required: true\n}, {\n  id: 'category',\n  question_text: 'Product Category',\n  question_type: 'select',\n  required: true,\n  options: [{\n    value: 'supplements',\n    label: 'Supplements'\n  }, {\n    value: 'food',\n    label: 'Food & Beverage'\n  }, {\n    value: 'cosmetics',\n    label: 'Cosmetics'\n  }, {\n    value: 'personal_care',\n    label: 'Personal Care'\n  }, {\n    value: 'household',\n    label: 'Household Products'\n  }, {\n    value: 'other',\n    label: 'Other'\n  }]\n}];\nconst initialBasicValues = {\n  name: '',\n  description: '',\n  category: ''\n};\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required')\n});\nconst ProductForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [productData, setProductData] = useState(null);\n  const [aiQuestions, setAiQuestions] = useState([]);\n  const handleBasicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating AI questions...');\n    try {\n      const product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n      setProductData(product);\n      const generateRequest = {\n        product,\n        num_questions: 5\n      };\n      const aiResponse = await aiApi.generateQuestions(generateRequest);\n      if (aiResponse.success && aiResponse.data) {\n        const questions = aiResponse.data.questions.map((q, i) => ({\n          id: `q_${i}`,\n          question_text: q,\n          question_type: 'text',\n          required: false,\n          is_ai_generated: true\n        }));\n        setAiQuestions(questions);\n        setCurrentStep(2);\n      } else {\n        alert(aiResponse.error || 'Failed to generate questions.');\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Error occurred while generating AI questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n  const handleQuestionsSubmit = async (values, {\n    setSubmitting\n  }) => {\n    if (!productData) {\n      alert('Product data missing. Please go back.');\n      return;\n    }\n    setIsLoading(true);\n    setLoadingMessage('Submitting and generating report...');\n    try {\n      const answeredQuestions = aiQuestions.map(q => ({\n        question_text: q.question_text,\n        answer: values[q.id] || '',\n        question_type: q.question_type,\n        is_ai_generated: true\n      }));\n      const productPayload = {\n        ...productData,\n        question_answers: answeredQuestions\n      };\n      const response = await productApi.create(productPayload);\n      if (response.success) {\n        const createdProduct = response.data;\n\n        // âœ… PDF generation\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Product Transparency Report', 20, 20);\n        doc.setFontSize(12);\n        doc.text(`Name: ${createdProduct.name}`, 20, 40);\n        doc.text(`Description: ${createdProduct.description}`, 20, 50);\n        doc.text(`Category: ${createdProduct.category}`, 20, 60);\n        let y = 80;\n        answeredQuestions.forEach(({\n          question_text,\n          answer\n        }) => {\n          doc.text(`${question_text}: ${answer}`, 20, y);\n          y += 10;\n        });\n        const blobUrl = doc.output('bloburl');\n        window.open(blobUrl, '_blank');\n\n        // âœ… Navigate to product detail page\n        navigate(`/product/${createdProduct._id}`);\n      } else {\n        alert(response.error || 'Failed to submit product');\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Failed to submit and generate report.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n  const initialQuestionsValues = useMemo(() => {\n    const values = {};\n    aiQuestions.forEach(q => {\n      values[q.id] = '';\n    });\n    return values;\n  }, [aiQuestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n        children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n          children: \"Product Submission Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n          children: currentStep === 1 ? 'Complete the form to generate AI questions about your product.' : 'Answer the AI-generated questions below.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), currentStep === 1 ? /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialBasicValues,\n        validationSchema: basicValidation,\n        onSubmit: handleBasicSubmit,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [basicFields.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id,\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: field.options,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialQuestionsValues,\n        onSubmit: handleQuestionsSubmit,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [aiQuestions.map(q => /*#__PURE__*/_jsxDEV(FormField, {\n            label: q.question_text,\n            name: q.id,\n            type: \"textarea\",\n            required: q.required\n          }, q.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"outline\",\n              onClick: () => setCurrentStep(1),\n              disabled: isSubmitting,\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductForm, \"WKnfXW72RxTrvnU/iOYjfhZMhHM=\", false, function () {\n  return [useNavigate];\n});\n_c8 = ProductForm;\nexport default ProductForm;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"FormContainer\");\n$RefreshReg$(_c2, \"FormHeader\");\n$RefreshReg$(_c3, \"FormTitle\");\n$RefreshReg$(_c4, \"FormDescription\");\n$RefreshReg$(_c5, \"FormActions\");\n$RefreshReg$(_c6, \"LoadingOverlay\");\n$RefreshReg$(_c7, \"Spinner\");\n$RefreshReg$(_c8, \"ProductForm\");","map":{"version":3,"names":["jsPDF","React","useState","useMemo","useNavigate","styled","Formik","Form","Yup","FormField","Button","productApi","aiApi","jsxDEV","_jsxDEV","FormContainer","div","theme","borderRadius","default","shadows","medium","_c","FormHeader","_c2","FormTitle","h1","colors","primary","_c3","FormDescription","p","lightText","_c4","FormActions","_c5","LoadingOverlay","_c6","Spinner","_c7","basicFields","id","question_text","question_type","required","options","value","label","initialBasicValues","name","description","category","basicValidation","object","string","ProductForm","_s","navigate","currentStep","setCurrentStep","isLoading","setIsLoading","loadingMessage","setLoadingMessage","productData","setProductData","aiQuestions","setAiQuestions","handleBasicSubmit","values","setSubmitting","product","ingredients","manufacturing_location","certifications","additional_info","generateRequest","num_questions","aiResponse","generateQuestions","success","data","questions","map","q","i","is_ai_generated","alert","error","err","console","handleQuestionsSubmit","answeredQuestions","answer","productPayload","question_answers","response","create","createdProduct","doc","setFontSize","text","y","forEach","blobUrl","output","window","open","_id","initialQuestionsValues","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","validationSchema","onSubmit","isSubmitting","field","type","tooltip","disabled","variant","onClick","_c8","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/pages/ProductForm.tsx"],"sourcesContent":["import jsPDF from 'jspdf';\nimport React, { useState, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi, aiApi } from '../services/api';\nimport { FormValues, Product, Question, GenerateQuestionsRequest } from '../types';\n\n// Styled components\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({ theme }) => theme.borderRadius.default};\n  box-shadow: ${({ theme }) => theme.shadows.medium};\n`;\n\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 1rem;\n`;\n\nconst FormDescription = styled.p`\n  color: ${({ theme }) => theme.colors.lightText};\n  font-size: 1.125rem;\n`;\n\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0; left: 0; right: 0; bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n  flex-direction: column;\n`;\n\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-top: 4px solid white;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\n// Step 1 questions (basic)\nconst basicFields: Question[] = [\n  { id: 'name', question_text: 'Product Name', question_type: 'text', required: true },\n  { id: 'description', question_text: 'Product Description', question_type: 'text', required: true },\n  {\n    id: 'category',\n    question_text: 'Product Category',\n    question_type: 'select',\n    required: true,\n    options: [\n      { value: 'supplements', label: 'Supplements' },\n      { value: 'food', label: 'Food & Beverage' },\n      { value: 'cosmetics', label: 'Cosmetics' },\n      { value: 'personal_care', label: 'Personal Care' },\n      { value: 'household', label: 'Household Products' },\n      { value: 'other', label: 'Other' },\n    ]\n  }\n];\n\nconst initialBasicValues: FormValues = {\n  name: '',\n  description: '',\n  category: ''\n};\n\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required')\n});\n\nconst ProductForm: React.FC = () => {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [productData, setProductData] = useState<Product | null>(null);\n  const [aiQuestions, setAiQuestions] = useState<Question[]>([]);\n\n  const handleBasicSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating AI questions...');\n\n    try {\n      const product: Product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n\n      setProductData(product);\n\n      const generateRequest: GenerateQuestionsRequest = {\n        product,\n        num_questions: 5\n      };\n\n      const aiResponse = await aiApi.generateQuestions(generateRequest);\n      if (aiResponse.success && aiResponse.data) {\n        const questions: Question[] = aiResponse.data.questions.map((q, i) => ({\n          id: `q_${i}`,\n          question_text: q,\n          question_type: 'text',\n          required: false,\n          is_ai_generated: true\n        }));\n\n        setAiQuestions(questions);\n        setCurrentStep(2);\n      } else {\n        alert(aiResponse.error || 'Failed to generate questions.');\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Error occurred while generating AI questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  const handleQuestionsSubmit = async (\n    values: FormValues,\n    { setSubmitting }: FormikHelpers<FormValues>\n  ) => {\n    if (!productData) {\n      alert('Product data missing. Please go back.');\n      return;\n    }\n\n    setIsLoading(true);\n    setLoadingMessage('Submitting and generating report...');\n\n    try {\n      const answeredQuestions: Question[] = aiQuestions.map((q) => ({\n        question_text: q.question_text,\n        answer: values[q.id!] || '',\n        question_type: q.question_type,\n        is_ai_generated: true\n      }));\n\n      const productPayload = {\n        ...productData,\n        question_answers: answeredQuestions\n      };\n\n      const response = await productApi.create(productPayload as any);\n\n      if (response.success) {\n        const createdProduct = response.data;\n\n        // âœ… PDF generation\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Product Transparency Report', 20, 20);\n\n        doc.setFontSize(12);\n        doc.text(`Name: ${createdProduct.name}`, 20, 40);\n        doc.text(`Description: ${createdProduct.description}`, 20, 50);\n        doc.text(`Category: ${createdProduct.category}`, 20, 60);\n\n        let y = 80;\n        answeredQuestions.forEach(({ question_text, answer }) => {\n          doc.text(`${question_text}: ${answer}`, 20, y);\n          y += 10;\n        });\n\n        const blobUrl = doc.output('bloburl');\n        window.open(blobUrl, '_blank');\n\n        // âœ… Navigate to product detail page\n        navigate(`/product/${createdProduct._id}`);\n      } else {\n        alert(response.error || 'Failed to submit product');\n      }\n    } catch (err) {\n      console.error(err);\n      alert('Failed to submit and generate report.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  const initialQuestionsValues = useMemo(() => {\n    const values: FormValues = {};\n    aiQuestions.forEach((q) => {\n      values[q.id!] = '';\n    });\n    return values;\n  }, [aiQuestions]);\n\n  return (\n    <div className=\"container\">\n      <FormContainer>\n        <FormHeader>\n          <FormTitle>Product Submission Form</FormTitle>\n          <FormDescription>\n            {currentStep === 1\n              ? 'Complete the form to generate AI questions about your product.'\n              : 'Answer the AI-generated questions below.'}\n          </FormDescription>\n        </FormHeader>\n\n        {currentStep === 1 ? (\n          <Formik\n            initialValues={initialBasicValues}\n            validationSchema={basicValidation}\n            onSubmit={handleBasicSubmit}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {basicFields.map((field) => (\n                  <FormField\n                    key={field.id}\n                    label={field.question_text}\n                    name={field.id!}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={field.options}\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Next\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        ) : (\n          <Formik\n            initialValues={initialQuestionsValues}\n            onSubmit={handleQuestionsSubmit}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                {aiQuestions.map((q) => (\n                  <FormField\n                    key={q.id}\n                    label={q.question_text}\n                    name={q.id!}\n                    type=\"textarea\"\n                    required={q.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCurrentStep(1)}\n                    disabled={isSubmitting}\n                  >\n                    Back\n                  </Button>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Submit\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n\n        {isLoading && (\n          <LoadingOverlay>\n            <Spinner />\n            <p>{loadingMessage}</p>\n          </LoadingOverlay>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default ProductForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}