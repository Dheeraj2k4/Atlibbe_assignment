{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\contexts\\\\ReportContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport reportService from '../services/reportService';\nimport { useAuth } from './AuthContext';\n\n// Context interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default values\nconst ReportContext = /*#__PURE__*/createContext({\n  reports: [],\n  userReports: [],\n  isLoading: false,\n  error: null,\n  generateReport: async () => ({\n    report_id: '',\n    filename: '',\n    report_url: '',\n    report_type: ''\n  }),\n  getReportsByProduct: async () => [],\n  getReportById: async () => ({\n    _id: '',\n    product: {\n      _id: '',\n      name: ''\n    },\n    filename: '',\n    filepath: '',\n    created_by: {\n      _id: '',\n      name: '',\n      email: ''\n    },\n    report_type: 'product_details',\n    metadata: {},\n    created_at: '',\n    updated_at: ''\n  }),\n  deleteReport: async () => {},\n  refreshReports: async () => {},\n  clearError: () => {}\n});\n\n// Props interface\n\n/**\n * Report Provider Component\n * Provides report state and methods to the app\n */\nexport const ReportProvider = ({\n  children\n}) => {\n  _s();\n  const [reports, setReports] = useState([]);\n  const [userReports, setUserReports] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user,\n    isAdmin,\n    isAuthenticated\n  } = useAuth();\n\n  // Load reports when user changes\n  useEffect(() => {\n    if (isAuthenticated) {\n      refreshReports();\n    }\n  }, [isAuthenticated, user === null || user === void 0 ? void 0 : user._id]);\n\n  /**\n   * Refresh reports data\n   */\n  const refreshReports = async () => {\n    if (!isAuthenticated) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Get user reports\n      const userReportsData = await reportService.getUserReports();\n      setUserReports(userReportsData);\n\n      // Get all reports for admin users\n      if (isAdmin) {\n        const allReports = await reportService.getAllReports();\n        setReports(allReports);\n      } else {\n        setReports(userReportsData);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to load reports');\n      console.error('Error loading reports:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Generate a new report\n   * @param params Report generation parameters\n   */\n  const generateReport = async params => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const newReport = await reportService.generateReport(params);\n      await refreshReports();\n      return newReport;\n    } catch (err) {\n      setError(err.message || 'Failed to generate report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get reports by product ID\n   * @param productId Product ID\n   */\n  const getReportsByProduct = async productId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      return await reportService.getReportsByProduct(productId);\n    } catch (err) {\n      setError(err.message || 'Failed to get reports');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get report by ID\n   * @param reportId Report ID\n   */\n  const getReportById = async reportId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      return await reportService.getReportById(reportId);\n    } catch (err) {\n      setError(err.message || 'Failed to get report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Delete a report\n   * @param reportId Report ID\n   */\n  const deleteReport = async reportId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      await reportService.deleteReport(reportId);\n      await refreshReports();\n    } catch (err) {\n      setError(err.message || 'Failed to delete report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Clear error\n   */\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    reports,\n    userReports,\n    isLoading,\n    error,\n    generateReport,\n    getReportsByProduct,\n    getReportById,\n    deleteReport,\n    refreshReports,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(ReportContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 10\n  }, this);\n};\n\n/**\n * Custom hook to use report context\n * @returns Report context\n */\n_s(ReportProvider, \"uQxZ1PTN2YaGmop+JlX+UEkPqaY=\", false, function () {\n  return [useAuth];\n});\n_c = ReportProvider;\nexport const useReports = () => {\n  _s2();\n  return useContext(ReportContext);\n};\n_s2(useReports, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReportProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","reportService","useAuth","jsxDEV","_jsxDEV","ReportContext","reports","userReports","isLoading","error","generateReport","report_id","filename","report_url","report_type","getReportsByProduct","getReportById","_id","product","name","filepath","created_by","email","metadata","created_at","updated_at","deleteReport","refreshReports","clearError","ReportProvider","children","_s","setReports","setUserReports","setIsLoading","setError","user","isAdmin","isAuthenticated","userReportsData","getUserReports","allReports","getAllReports","err","message","console","params","newReport","productId","reportId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReports","_s2","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/contexts/ReportContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport reportService, { Report, GenerateReportParams, GenerateReportResponse } from '../services/reportService';\nimport { useAuth } from './AuthContext';\n\n// Context interface\ninterface ReportContextType {\n  reports: Report[];\n  userReports: Report[];\n  isLoading: boolean;\n  error: string | null;\n  generateReport: (params: GenerateReportParams) => Promise<GenerateReportResponse>;\n  getReportsByProduct: (productId: string) => Promise<Report[]>;\n  getReportById: (reportId: string) => Promise<Report>;\n  deleteReport: (reportId: string) => Promise<void>;\n  refreshReports: () => Promise<void>;\n  clearError: () => void;\n}\n\n// Create context with default values\nconst ReportContext = createContext<ReportContextType>({\n  reports: [],\n  userReports: [],\n  isLoading: false,\n  error: null,\n  generateReport: async () => ({ report_id: '', filename: '', report_url: '', report_type: '' }),\n  getReportsByProduct: async () => [],\n  getReportById: async () => ({\n    _id: '',\n    product: {\n      _id: '',\n      name: '',\n    },\n    filename: '',\n    filepath: '',\n    created_by: {\n      _id: '',\n      name: '',\n      email: '',\n    },\n    report_type: 'product_details',\n    metadata: {},\n    created_at: '',\n    updated_at: '',\n  }),\n  deleteReport: async () => {},\n  refreshReports: async () => {},\n  clearError: () => {},\n});\n\n// Props interface\ninterface ReportProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Report Provider Component\n * Provides report state and methods to the app\n */\nexport const ReportProvider: React.FC<ReportProviderProps> = ({ children }) => {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [userReports, setUserReports] = useState<Report[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user, isAdmin, isAuthenticated } = useAuth();\n\n  // Load reports when user changes\n  useEffect(() => {\n    if (isAuthenticated) {\n      refreshReports();\n    }\n  }, [isAuthenticated, user?._id]);\n\n  /**\n   * Refresh reports data\n   */\n  const refreshReports = async () => {\n    if (!isAuthenticated) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Get user reports\n      const userReportsData = await reportService.getUserReports();\n      setUserReports(userReportsData);\n      \n      // Get all reports for admin users\n      if (isAdmin) {\n        const allReports = await reportService.getAllReports();\n        setReports(allReports);\n      } else {\n        setReports(userReportsData);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load reports');\n      console.error('Error loading reports:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Generate a new report\n   * @param params Report generation parameters\n   */\n  const generateReport = async (params: GenerateReportParams) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const newReport = await reportService.generateReport(params);\n      await refreshReports();\n      return newReport;\n    } catch (err: any) {\n      setError(err.message || 'Failed to generate report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get reports by product ID\n   * @param productId Product ID\n   */\n  const getReportsByProduct = async (productId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      return await reportService.getReportsByProduct(productId);\n    } catch (err: any) {\n      setError(err.message || 'Failed to get reports');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Get report by ID\n   * @param reportId Report ID\n   */\n  const getReportById = async (reportId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      return await reportService.getReportById(reportId);\n    } catch (err: any) {\n      setError(err.message || 'Failed to get report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Delete a report\n   * @param reportId Report ID\n   */\n  const deleteReport = async (reportId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await reportService.deleteReport(reportId);\n      await refreshReports();\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete report');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Clear error\n   */\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    reports,\n    userReports,\n    isLoading,\n    error,\n    generateReport,\n    getReportsByProduct,\n    getReportById,\n    deleteReport,\n    refreshReports,\n    clearError,\n  };\n\n  return <ReportContext.Provider value={value}>{children}</ReportContext.Provider>;\n};\n\n/**\n * Custom hook to use report context\n * @returns Report context\n */\nexport const useReports = () => useContext(ReportContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}