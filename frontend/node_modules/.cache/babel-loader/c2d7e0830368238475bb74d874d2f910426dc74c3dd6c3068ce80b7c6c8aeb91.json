{"ast":null,"code":"// src/services/api.ts\nimport axios from 'axios';\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst aiService = axios.create({\n  baseURL: process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(async config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return api(originalRequest);\n  }\n  return Promise.reject(error);\n});\nexport const productApi = {\n  createProduct: async product => {\n    try {\n      const response = await api.post('/api/products', product);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to create product'\n      };\n    }\n  },\n  getProduct: async id => {\n    try {\n      const response = await api.get(`/api/products/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch product'\n      };\n    }\n  }\n};\nexport const reportApi = {\n  getReport: async id => {\n    try {\n      const response = await api.get(`/api/report/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to fetch report'\n      };\n    }\n  },\n  downloadReport: async id => {\n    try {\n      const response = await api.get(`/api/report/${id}/download`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to download report');\n    }\n  }\n};\nexport const aiApi = {\n  generateQuestions: async request => {\n    const response = await aiService.post('/generate-questions', request);\n    return response.data;\n  },\n  getTransparencyScore: async request => {\n    try {\n      const response = await aiService.post('/api/transparency-score', request);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to calculate transparency score'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","aiService","REACT_APP_AI_SERVICE_URL","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","originalRequest","status","_retry","productApi","createProduct","product","post","data","_error$response2","_error$response2$data","success","getProduct","id","get","_error$response3","_error$response3$data","reportApi","getReport","_error$response4","_error$response4$data","downloadReport","responseType","_error$response5","_error$response5$data","Error","aiApi","generateQuestions","getTransparencyScore","_error$response6","_error$response6$data"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\nimport axios, { AxiosResponse } from 'axios';\nimport {\n  Product,\n  Report,\n  ApiResponse,\n  GenerateQuestionsResponse,\n  TransparencyScoreRequest,\n  TransparencyScoreResponse,\n} from '../types';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst aiService = axios.create({\n  baseURL: process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use(\n  async (config) => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      return api(originalRequest);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const productApi = {\n  createProduct: async (product: Product): Promise<ApiResponse<Product>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<Product>> = await api.post('/api/products', product);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to create product',\n      };\n    }\n  },\n\n  getProduct: async (id: string): Promise<ApiResponse<Product>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<Product>> = await api.get(`/api/products/${id}`);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to fetch product',\n      };\n    }\n  },\n};\n\nexport const reportApi = {\n  getReport: async (id: string): Promise<ApiResponse<Report>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<Report>> = await api.get(`/api/report/${id}`);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to fetch report',\n      };\n    }\n  },\n\n  downloadReport: async (id: string): Promise<Blob> => {\n    try {\n      const response = await api.get(`/api/report/${id}/download`, {\n        responseType: 'blob',\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to download report');\n    }\n  },\n};\n\nexport const aiApi = {\n  generateQuestions: async (\n    request: GenerateQuestionsRequest\n  ): Promise<ApiResponse<GenerateQuestionsResponse>> => {\n    const response: AxiosResponse<ApiResponse<GenerateQuestionsResponse>> = await aiService.post(\n      '/generate-questions',\n      request\n    );\n    return response.data;\n  },\n  \n\n  getTransparencyScore: async (\n    request: TransparencyScoreRequest\n  ): Promise<ApiResponse<TransparencyScoreResponse>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<TransparencyScoreResponse>> = await aiService.post(\n        '/api/transparency-score',\n        request\n      );\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to calculate transparency score',\n      };\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}