{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import authService from'../services/authService';// Context interface\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create context with default values\nconst AuthContext=/*#__PURE__*/createContext({user:null,isLoading:false,error:null,isAuthenticated:false,isAdmin:false,login:async()=>{},register:async()=>{},logout:()=>{},updateProfile:async()=>{},clearError:()=>{}});// Props interface\n/**\n * Auth Provider Component\n * Provides authentication state and methods to the app\n */export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);// Initialize auth state from local storage\nuseEffect(()=>{const initAuth=async()=>{try{if(authService.isLoggedIn()){const userData=authService.getUser();setUser(userData);}}catch(err){console.error('Error initializing auth:',err);authService.logout();}finally{setIsLoading(false);}};initAuth();},[]);/**\n   * Login user\n   * @param credentials User login credentials\n   */const login=async credentials=>{setIsLoading(true);setError(null);try{const userData=await authService.login(credentials);setUser(userData);}catch(err){setError(err.message);throw err;}finally{setIsLoading(false);}};/**\n   * Register user\n   * @param userData User registration data\n   */const register=async userData=>{setIsLoading(true);setError(null);try{const newUser=await authService.register(userData);setUser(newUser);}catch(err){setError(err.message);throw err;}finally{setIsLoading(false);}};/**\n   * Logout user\n   */const logout=()=>{authService.logout();setUser(null);};/**\n   * Update user profile\n   * @param updateData Profile update data\n   */const updateProfile=async updateData=>{setIsLoading(true);setError(null);try{const updatedUser=await authService.updateProfile(updateData);setUser(updatedUser);}catch(err){setError(err.message);throw err;}finally{setIsLoading(false);}};/**\n   * Clear error\n   */const clearError=()=>{setError(null);};// Compute derived state\nconst isAuthenticated=!!user;const isAdmin=(user===null||user===void 0?void 0:user.role)==='admin';// Context value\nconst value={user,isLoading,error,isAuthenticated,isAdmin,login,register,logout,updateProfile,clearError};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};/**\n * Custom hook to use auth context\n * @returns Auth context\n */export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsx","_jsx","AuthContext","user","isLoading","error","isAuthenticated","isAdmin","login","register","logout","updateProfile","clearError","AuthProvider","_ref","children","setUser","setIsLoading","setError","initAuth","isLoggedIn","userData","getUser","err","console","credentials","message","newUser","updateData","updatedUser","role","value","Provider","useAuth"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport authService, { UserData, LoginCredentials, RegisterData, UpdateProfileData } from '../services/authService';\n\n// Context interface\ninterface AuthContextType {\n  user: UserData | null;\n  isLoading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => void;\n  updateProfile: (updateData: UpdateProfileData) => Promise<void>;\n  clearError: () => void;\n}\n\n// Create context with default values\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isLoading: false,\n  error: null,\n  isAuthenticated: false,\n  isAdmin: false,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  updateProfile: async () => {},\n  clearError: () => {},\n});\n\n// Props interface\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Auth Provider Component\n * Provides authentication state and methods to the app\n */\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserData | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize auth state from local storage\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        if (authService.isLoggedIn()) {\n          const userData = authService.getUser();\n          setUser(userData);\n        }\n      } catch (err) {\n        console.error('Error initializing auth:', err);\n        authService.logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  /**\n   * Login user\n   * @param credentials User login credentials\n   */\n  const login = async (credentials: LoginCredentials) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const userData = await authService.login(credentials);\n      setUser(userData);\n    } catch (err: any) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Register user\n   * @param userData User registration data\n   */\n  const register = async (userData: RegisterData) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const newUser = await authService.register(userData);\n      setUser(newUser);\n    } catch (err: any) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Logout user\n   */\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n\n  /**\n   * Update user profile\n   * @param updateData Profile update data\n   */\n  const updateProfile = async (updateData: UpdateProfileData) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const updatedUser = await authService.updateProfile(updateData);\n      setUser(updatedUser);\n    } catch (err: any) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Clear error\n   */\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Compute derived state\n  const isAuthenticated = !!user;\n  const isAdmin = user?.role === 'admin';\n\n  // Context value\n  const value = {\n    user,\n    isLoading,\n    error,\n    isAuthenticated,\n    isAdmin,\n    login,\n    register,\n    logout,\n    updateProfile,\n    clearError,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n/**\n * Custom hook to use auth context\n * @returns Auth context\n */\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}