{"ast":null,"code":"// src/services/api.ts\nimport axios from 'axios';\n// Helper function to validate MongoDB ObjectId format\nconst isValidObjectId = id => {\n  return /^[0-9a-fA-F]{24}$/.test(id);\n};\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst aiService = axios.create({\n  baseURL: process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(async config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return api(originalRequest);\n  }\n  return Promise.reject(error);\n});\nexport const productApi = {\n  createProduct: async product => {\n    try {\n      const response = await api.post('/api/products', product);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to create product'\n      };\n    }\n  },\n  getProduct: async id => {\n    try {\n      // Validate ObjectId format before making the API call\n      if (!isValidObjectId(id)) {\n        return {\n          success: false,\n          error: 'Invalid product ID format'\n        };\n      }\n      const response = await api.get(`/api/products/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch product'\n      };\n    }\n  }\n};\nexport const reportApi = {\n  getReport: async id => {\n    try {\n      // Validate ObjectId format before making the API call\n      if (!isValidObjectId(id)) {\n        return {\n          success: false,\n          error: 'Invalid product ID format'\n        };\n      }\n\n      // Use the correct endpoint for getting a report by product ID\n      const response = await api.get(`/api/report/product/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error fetching report:', error);\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to fetch report'\n      };\n    }\n  },\n  downloadReport: async id => {\n    try {\n      // Validate ObjectId format before making the API call\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n\n      // Use the correct endpoint for downloading a report by product ID\n      const response = await api.get(`/api/report/download/${id}`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error downloading report:', error);\n      throw error;\n    }\n  },\n  previewReport: async id => {\n    try {\n      // Validate ObjectId format before generating the preview URL\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n\n      // Return the URL for previewing the report\n      return `${api.defaults.baseURL}/api/report/preview/${id}`;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error generating preview URL:', error);\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to generate preview URL');\n    }\n  }\n};\nexport const aiApi = {\n  generateQuestions: async request => {\n    try {\n      const response = await aiService.post('/api/generate-questions', request);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error generating questions:', error);\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to generate questions'\n      };\n    }\n  },\n  getTransparencyScore: async request => {\n    try {\n      const response = await aiService.post('/api/transparency-score', request);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || 'Failed to calculate transparency score'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","isValidObjectId","id","test","api","create","baseURL","process","env","REACT_APP_API_URL","headers","aiService","REACT_APP_AI_SERVICE_URL","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","originalRequest","status","_retry","productApi","createProduct","product","post","data","_error$response2","_error$response2$data","success","getProduct","get","_error$response3","_error$response3$data","reportApi","getReport","_error$response4","_error$response4$data","console","downloadReport","Error","responseType","previewReport","defaults","_error$response5","_error$response5$data","aiApi","generateQuestions","_error$response6","_error$response6$data","getTransparencyScore","_error$response7","_error$response7$data"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\nimport axios, { AxiosResponse } from 'axios';\nimport {\n  Product,\n  Report,\n  ApiResponse,\n  GenerateQuestionsResponse,\n  TransparencyScoreRequest,\n  TransparencyScoreResponse,\n  GenerateQuestionsRequest,\n} from '../types';\n\n// Helper function to validate MongoDB ObjectId format\nconst isValidObjectId = (id: string): boolean => {\n  return /^[0-9a-fA-F]{24}$/.test(id);\n};\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst aiService = axios.create({\n  baseURL: process.env.REACT_APP_AI_SERVICE_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use(\n  async (config) => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      return api(originalRequest);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const productApi = {\n  createProduct: async (product: Product): Promise<ApiResponse<Product>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<Product>> = await api.post('/api/products', product);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to create product',\n      };\n    }\n  },\n\n  getProduct: async (id: string): Promise<ApiResponse<Product>> => {\n    try {\n      // Validate ObjectId format before making the API call\n      if (!isValidObjectId(id)) {\n        return {\n          success: false,\n          error: 'Invalid product ID format',\n        };\n      }\n      \n      const response: AxiosResponse<ApiResponse<Product>> = await api.get(`/api/products/${id}`);\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to fetch product',\n      };\n    }\n  },\n};\n\nexport const reportApi = {\n  getReport: async (id: string): Promise<ApiResponse<Report>> => {\n    try {\n      // Validate ObjectId format before making the API call\n      if (!isValidObjectId(id)) {\n        return {\n          success: false,\n          error: 'Invalid product ID format',\n        };\n      }\n      \n      // Use the correct endpoint for getting a report by product ID\n      const response: AxiosResponse<ApiResponse<Report>> = await api.get(`/api/report/product/${id}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching report:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to fetch report',\n      };\n    }\n  },\n\n  downloadReport: async (id: string): Promise<Blob> => {\n    try {\n      // Validate ObjectId format before making the API call\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n      \n      // Use the correct endpoint for downloading a report by product ID\n      const response = await api.get(`/api/report/download/${id}`, {\n        responseType: 'blob',\n      });\n      return response.data;\n    } catch (error: any) {\n      console.error('Error downloading report:', error);\n      throw error;\n    }\n  },\n  \n  previewReport: async (id: string): Promise<string> => {\n    try {\n      // Validate ObjectId format before generating the preview URL\n      if (!isValidObjectId(id)) {\n        throw new Error('Invalid product ID format');\n      }\n      \n      // Return the URL for previewing the report\n      return `${api.defaults.baseURL}/api/report/preview/${id}`;\n    } catch (error: any) {\n      console.error('Error generating preview URL:', error);\n      throw new Error(error.response?.data?.error || 'Failed to generate preview URL');\n    }\n  },\n};\n\nexport const aiApi = {\n  generateQuestions: async (\n    request: GenerateQuestionsRequest\n  ): Promise<ApiResponse<GenerateQuestionsResponse>> => {\n    try {\n      const response: AxiosResponse<GenerateQuestionsResponse> = await aiService.post(\n        '/api/generate-questions',\n        request\n      );\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error: any) {\n      console.error('Error generating questions:', error);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to generate questions'\n      };\n    }\n  },\n  \n\n  getTransparencyScore: async (\n    request: TransparencyScoreRequest\n  ): Promise<ApiResponse<TransparencyScoreResponse>> => {\n    try {\n      const response: AxiosResponse<ApiResponse<TransparencyScoreResponse>> = await aiService.post(\n        '/api/transparency-score',\n        request\n      );\n      return response.data;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Failed to calculate transparency score',\n      };\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}