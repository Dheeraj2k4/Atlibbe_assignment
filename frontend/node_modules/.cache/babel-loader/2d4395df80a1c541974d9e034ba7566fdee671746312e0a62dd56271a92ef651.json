{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../config';\n\n// Types\n\n// Local storage key\nconst TOKEN_KEY = 'auth_token';\nconst USER_KEY = 'user_data';\n\n/**\r\n * Authentication Service\r\n * Handles user authentication, registration, and profile management\r\n */\nconst authService = {\n  /**\r\n   * Register a new user\r\n   * @param userData User registration data\r\n   * @returns User data with token\r\n   */\n  async register(userData) {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\n      if (response.data.success) {\n        this.setToken(response.data.data.token);\n        this.setUser(response.data.data);\n        return response.data.data;\n      }\n      throw new Error('Registration failed');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Registration failed');\n    }\n  },\n  /**\r\n   * Login user\r\n   * @param credentials User login credentials\r\n   * @returns User data with token\r\n   */\n  async login(credentials) {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, credentials);\n      if (response.data.success) {\n        this.setToken(response.data.data.token);\n        this.setUser(response.data.data);\n        return response.data.data;\n      }\n      throw new Error('Login failed');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Login failed');\n    }\n  },\n  /**\r\n   * Logout user\r\n   */\n  logout() {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n  },\n  /**\r\n   * Get user profile\r\n   * @returns User profile data\r\n   */\n  async getProfile() {\n    try {\n      const response = await axios.get(`${API_URL}/auth/profile`, {\n        headers: this.authHeader()\n      });\n      if (response.data.success) {\n        // Update stored user data with latest profile\n        const userData = {\n          ...this.getUser(),\n          ...response.data.data\n        };\n        this.setUser(userData);\n        return userData;\n      }\n      throw new Error('Failed to get profile');\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        this.logout();\n      }\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to get profile');\n    }\n  },\n  /**\r\n   * Update user profile\r\n   * @param updateData Profile update data\r\n   * @returns Updated user data\r\n   */\n  async updateProfile(updateData) {\n    try {\n      const response = await axios.put(`${API_URL}/auth/profile`, updateData, {\n        headers: this.authHeader()\n      });\n      if (response.data.success) {\n        // Update stored user data with updated profile\n        const userData = {\n          ...this.getUser(),\n          ...response.data.data\n        };\n        this.setUser(userData);\n        return userData;\n      }\n      throw new Error('Failed to update profile');\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to update profile');\n    }\n  },\n  /**\r\n   * Check if user is logged in\r\n   * @returns True if user is logged in\r\n   */\n  isLoggedIn() {\n    return !!this.getToken();\n  },\n  /**\r\n   * Check if user is admin\r\n   * @returns True if user is admin\r\n   */\n  isAdmin() {\n    const user = this.getUser();\n    return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  },\n  /**\r\n   * Get authentication header\r\n   * @returns Authentication header object\r\n   */\n  authHeader() {\n    const token = this.getToken();\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  },\n  /**\r\n   * Set authentication token\r\n   * @param token JWT token\r\n   */\n  setToken(token) {\n    localStorage.setItem(TOKEN_KEY, token);\n  },\n  /**\r\n   * Get authentication token\r\n   * @returns JWT token\r\n   */\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  /**\r\n   * Set user data\r\n   * @param user User data\r\n   */\n  setUser(user) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  },\n  /**\r\n   * Get user data\r\n   * @returns User data\r\n   */\n  getUser() {\n    const userData = localStorage.getItem(USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  },\n  /**\r\n   * Get all users (admin only)\r\n   * @returns List of all users\r\n   */\n  async getUsers() {\n    try {\n      const response = await axios.get(`${API_URL}/auth/users`, {\n        headers: this.authHeader()\n      });\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to get users');\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to get users');\n    }\n  },\n  /**\r\n   * Delete a user (admin only)\r\n   * @param userId User ID to delete\r\n   * @returns Success message\r\n   */\n  async deleteUser(userId) {\n    try {\n      const response = await axios.delete(`${API_URL}/auth/users/${userId}`, {\n        headers: this.authHeader()\n      });\n      if (response.data.success) {\n        return response.data.message;\n      }\n      throw new Error('Failed to delete user');\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || 'Failed to delete user');\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","TOKEN_KEY","USER_KEY","authService","register","userData","response","post","data","success","setToken","token","setUser","Error","error","_error$response","_error$response$data","login","credentials","_error$response2","_error$response2$data","logout","localStorage","removeItem","getProfile","get","headers","authHeader","getUser","_error$response3","_error$response4","_error$response4$data","status","updateProfile","updateData","put","_error$response5","_error$response5$data","isLoggedIn","getToken","isAdmin","user","role","Authorization","setItem","getItem","JSON","stringify","parse","getUsers","_error$response6","_error$response6$data","deleteUser","userId","delete","message","_error$response7","_error$response7$data"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../config';\r\n\r\n// Types\r\nexport interface UserData {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  token: string;\r\n}\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData extends LoginCredentials {\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateProfileData {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\n// Local storage key\r\nconst TOKEN_KEY = 'auth_token';\r\nconst USER_KEY = 'user_data';\r\n\r\n/**\r\n * Authentication Service\r\n * Handles user authentication, registration, and profile management\r\n */\r\nconst authService = {\r\n  /**\r\n   * Register a new user\r\n   * @param userData User registration data\r\n   * @returns User data with token\r\n   */\r\n  async register(userData: RegisterData): Promise<UserData> {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\r\n      if (response.data.success) {\r\n        this.setToken(response.data.data.token);\r\n        this.setUser(response.data.data);\r\n        return response.data.data;\r\n      }\r\n      throw new Error('Registration failed');\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.error || 'Registration failed');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Login user\r\n   * @param credentials User login credentials\r\n   * @returns User data with token\r\n   */\r\n  async login(credentials: LoginCredentials): Promise<UserData> {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/login`, credentials);\r\n      if (response.data.success) {\r\n        this.setToken(response.data.data.token);\r\n        this.setUser(response.data.data);\r\n        return response.data.data;\r\n      }\r\n      throw new Error('Login failed');\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.error || 'Login failed');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Logout user\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n  },\r\n\r\n  /**\r\n   * Get user profile\r\n   * @returns User profile data\r\n   */\r\n  async getProfile(): Promise<UserData> {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/auth/profile`, {\r\n        headers: this.authHeader(),\r\n      });\r\n      if (response.data.success) {\r\n        // Update stored user data with latest profile\r\n        const userData = { ...this.getUser(), ...response.data.data };\r\n        this.setUser(userData);\r\n        return userData;\r\n      }\r\n      throw new Error('Failed to get profile');\r\n    } catch (error: any) {\r\n      if (error.response?.status === 401) {\r\n        this.logout();\r\n      }\r\n      throw new Error(error.response?.data?.error || 'Failed to get profile');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update user profile\r\n   * @param updateData Profile update data\r\n   * @returns Updated user data\r\n   */\r\n  async updateProfile(updateData: UpdateProfileData): Promise<UserData> {\r\n    try {\r\n      const response = await axios.put(`${API_URL}/auth/profile`, updateData, {\r\n        headers: this.authHeader(),\r\n      });\r\n      if (response.data.success) {\r\n        // Update stored user data with updated profile\r\n        const userData = { ...this.getUser(), ...response.data.data };\r\n        this.setUser(userData);\r\n        return userData;\r\n      }\r\n      throw new Error('Failed to update profile');\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.error || 'Failed to update profile');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check if user is logged in\r\n   * @returns True if user is logged in\r\n   */\r\n  isLoggedIn(): boolean {\r\n    return !!this.getToken();\r\n  },\r\n\r\n  /**\r\n   * Check if user is admin\r\n   * @returns True if user is admin\r\n   */\r\n  isAdmin(): boolean {\r\n    const user = this.getUser();\r\n    return user?.role === 'admin';\r\n  },\r\n\r\n  /**\r\n   * Get authentication header\r\n   * @returns Authentication header object\r\n   */\r\n  authHeader(): { Authorization: string } | {} {\r\n    const token = this.getToken();\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  },\r\n\r\n  /**\r\n   * Set authentication token\r\n   * @param token JWT token\r\n   */\r\n  setToken(token: string): void {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n  },\r\n\r\n  /**\r\n   * Get authentication token\r\n   * @returns JWT token\r\n   */\r\n  getToken(): string | null {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  },\r\n\r\n  /**\r\n   * Set user data\r\n   * @param user User data\r\n   */\r\n  setUser(user: UserData): void {\r\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n  },\r\n\r\n  /**\r\n   * Get user data\r\n   * @returns User data\r\n   */\r\n  getUser(): UserData | null {\r\n    const userData = localStorage.getItem(USER_KEY);\r\n    return userData ? JSON.parse(userData) : null;\r\n  },\r\n\r\n  /**\r\n   * Get all users (admin only)\r\n   * @returns List of all users\r\n   */\r\n  async getUsers(): Promise<UserData[]> {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/auth/users`, {\r\n        headers: this.authHeader(),\r\n      });\r\n      if (response.data.success) {\r\n        return response.data.data;\r\n      }\r\n      throw new Error('Failed to get users');\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.error || 'Failed to get users');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Delete a user (admin only)\r\n   * @param userId User ID to delete\r\n   * @returns Success message\r\n   */\r\n  async deleteUser(userId: string): Promise<string> {\r\n    try {\r\n      const response = await axios.delete(`${API_URL}/auth/users/${userId}`, {\r\n        headers: this.authHeader(),\r\n      });\r\n      if (response.data.success) {\r\n        return response.data.message;\r\n      }\r\n      throw new Error('Failed to delete user');\r\n    } catch (error: any) {\r\n      throw new Error(error.response?.data?.error || 'Failed to delete user');\r\n    }\r\n  },\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}