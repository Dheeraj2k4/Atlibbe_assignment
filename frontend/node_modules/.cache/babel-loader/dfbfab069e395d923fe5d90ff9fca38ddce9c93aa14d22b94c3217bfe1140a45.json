{"ast":null,"code":"import axios from'axios';import{API_URL}from'../config';// Types\n// Local storage key\nconst TOKEN_KEY='auth_token';const USER_KEY='user_data';/**\n * Authentication Service\n * Handles user authentication, registration, and profile management\n */const authService={/**\n   * Register a new user\n   * @param userData User registration data\n   * @returns User data with token\n   */async register(userData){try{const response=await axios.post(`${API_URL}/auth/register`,userData);if(response.data.success){this.setToken(response.data.data.token);this.setUser(response.data.data);return response.data.data;}throw new Error('Registration failed');}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Registration failed');}},/**\n   * Login user\n   * @param credentials User login credentials\n   * @returns User data with token\n   */async login(credentials){try{const response=await axios.post(`${API_URL}/auth/login`,credentials);if(response.data.success){this.setToken(response.data.data.token);this.setUser(response.data.data);return response.data.data;}throw new Error('Login failed');}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Login failed');}},/**\n   * Logout user\n   */logout(){localStorage.removeItem(TOKEN_KEY);localStorage.removeItem(USER_KEY);},/**\n   * Get user profile\n   * @returns User profile data\n   */async getProfile(){try{const response=await axios.get(`${API_URL}/auth/profile`,{headers:this.authHeader()});if(response.data.success){// Update stored user data with latest profile\nconst userData={...this.getUser(),...response.data.data};this.setUser(userData);return userData;}throw new Error('Failed to get profile');}catch(error){var _error$response3,_error$response4,_error$response4$data;if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===401){this.logout();}throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Failed to get profile');}},/**\n   * Update user profile\n   * @param updateData Profile update data\n   * @returns Updated user data\n   */async updateProfile(updateData){try{const response=await axios.put(`${API_URL}/auth/profile`,updateData,{headers:this.authHeader()});if(response.data.success){// Update stored user data with updated profile\nconst userData={...this.getUser(),...response.data.data};this.setUser(userData);return userData;}throw new Error('Failed to update profile');}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'Failed to update profile');}},/**\n   * Check if user is logged in\n   * @returns True if user is logged in\n   */isLoggedIn(){return!!this.getToken();},/**\n   * Check if user is admin\n   * @returns True if user is admin\n   */isAdmin(){const user=this.getUser();return(user===null||user===void 0?void 0:user.role)==='admin';},/**\n   * Get authentication header\n   * @returns Authentication header object\n   */authHeader(){const token=this.getToken();return token?{Authorization:`Bearer ${token}`}:{};},/**\n   * Set authentication token\n   * @param token JWT token\n   */setToken(token){localStorage.setItem(TOKEN_KEY,token);},/**\n   * Get authentication token\n   * @returns JWT token\n   */getToken(){return localStorage.getItem(TOKEN_KEY);},/**\n   * Set user data\n   * @param user User data\n   */setUser(user){localStorage.setItem(USER_KEY,JSON.stringify(user));},/**\n   * Get user data\n   * @returns User data\n   */getUser(){const userData=localStorage.getItem(USER_KEY);return userData?JSON.parse(userData):null;},/**\n   * Get all users (admin only)\n   * @returns List of all users\n   */async getUsers(){try{const response=await axios.get(`${API_URL}/auth/users`,{headers:this.authHeader()});if(response.data.success){return response.data.data;}throw new Error('Failed to get users');}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||'Failed to get users');}},/**\n   * Delete a user (admin only)\n   * @param userId User ID to delete\n   * @returns Success message\n   */async deleteUser(userId){try{const response=await axios.delete(`${API_URL}/auth/users/${userId}`,{headers:this.authHeader()});if(response.data.success){return response.data.message;}throw new Error('Failed to delete user');}catch(error){var _error$response7,_error$response7$data;throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.error)||'Failed to delete user');}}};export default authService;","map":{"version":3,"names":["axios","API_URL","TOKEN_KEY","USER_KEY","authService","register","userData","response","post","data","success","setToken","token","setUser","Error","error","_error$response","_error$response$data","login","credentials","_error$response2","_error$response2$data","logout","localStorage","removeItem","getProfile","get","headers","authHeader","getUser","_error$response3","_error$response4","_error$response4$data","status","updateProfile","updateData","put","_error$response5","_error$response5$data","isLoggedIn","getToken","isAdmin","user","role","Authorization","setItem","getItem","JSON","stringify","parse","getUsers","_error$response6","_error$response6$data","deleteUser","userId","delete","message","_error$response7","_error$response7$data"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\nimport { API_URL } from '../config';\n\n// Types\nexport interface UserData {\n  _id: string;\n  name: string;\n  email: string;\n  role: string;\n  token: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData extends LoginCredentials {\n  name: string;\n}\n\nexport interface UpdateProfileData {\n  name?: string;\n  email?: string;\n  password?: string;\n}\n\n// Local storage key\nconst TOKEN_KEY = 'auth_token';\nconst USER_KEY = 'user_data';\n\n/**\n * Authentication Service\n * Handles user authentication, registration, and profile management\n */\nconst authService = {\n  /**\n   * Register a new user\n   * @param userData User registration data\n   * @returns User data with token\n   */\n  async register(userData: RegisterData): Promise<UserData> {\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, userData);\n      if (response.data.success) {\n        this.setToken(response.data.data.token);\n        this.setUser(response.data.data);\n        return response.data.data;\n      }\n      throw new Error('Registration failed');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Registration failed');\n    }\n  },\n\n  /**\n   * Login user\n   * @param credentials User login credentials\n   * @returns User data with token\n   */\n  async login(credentials: LoginCredentials): Promise<UserData> {\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, credentials);\n      if (response.data.success) {\n        this.setToken(response.data.data.token);\n        this.setUser(response.data.data);\n        return response.data.data;\n      }\n      throw new Error('Login failed');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Login failed');\n    }\n  },\n\n  /**\n   * Logout user\n   */\n  logout(): void {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n  },\n\n  /**\n   * Get user profile\n   * @returns User profile data\n   */\n  async getProfile(): Promise<UserData> {\n    try {\n      const response = await axios.get(`${API_URL}/auth/profile`, {\n        headers: this.authHeader(),\n      });\n      if (response.data.success) {\n        // Update stored user data with latest profile\n        const userData = { ...this.getUser(), ...response.data.data };\n        this.setUser(userData);\n        return userData;\n      }\n      throw new Error('Failed to get profile');\n    } catch (error: any) {\n      if (error.response?.status === 401) {\n        this.logout();\n      }\n      throw new Error(error.response?.data?.error || 'Failed to get profile');\n    }\n  },\n\n  /**\n   * Update user profile\n   * @param updateData Profile update data\n   * @returns Updated user data\n   */\n  async updateProfile(updateData: UpdateProfileData): Promise<UserData> {\n    try {\n      const response = await axios.put(`${API_URL}/auth/profile`, updateData, {\n        headers: this.authHeader(),\n      });\n      if (response.data.success) {\n        // Update stored user data with updated profile\n        const userData = { ...this.getUser(), ...response.data.data };\n        this.setUser(userData);\n        return userData;\n      }\n      throw new Error('Failed to update profile');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to update profile');\n    }\n  },\n\n  /**\n   * Check if user is logged in\n   * @returns True if user is logged in\n   */\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  },\n\n  /**\n   * Check if user is admin\n   * @returns True if user is admin\n   */\n  isAdmin(): boolean {\n    const user = this.getUser();\n    return user?.role === 'admin';\n  },\n\n  /**\n   * Get authentication header\n   * @returns Authentication header object\n   */\n  authHeader(): { Authorization: string } | {} {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  },\n\n  /**\n   * Set authentication token\n   * @param token JWT token\n   */\n  setToken(token: string): void {\n    localStorage.setItem(TOKEN_KEY, token);\n  },\n\n  /**\n   * Get authentication token\n   * @returns JWT token\n   */\n  getToken(): string | null {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n\n  /**\n   * Set user data\n   * @param user User data\n   */\n  setUser(user: UserData): void {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  },\n\n  /**\n   * Get user data\n   * @returns User data\n   */\n  getUser(): UserData | null {\n    const userData = localStorage.getItem(USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  },\n\n  /**\n   * Get all users (admin only)\n   * @returns List of all users\n   */\n  async getUsers(): Promise<UserData[]> {\n    try {\n      const response = await axios.get(`${API_URL}/auth/users`, {\n        headers: this.authHeader(),\n      });\n      if (response.data.success) {\n        return response.data.data;\n      }\n      throw new Error('Failed to get users');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to get users');\n    }\n  },\n\n  /**\n   * Delete a user (admin only)\n   * @param userId User ID to delete\n   * @returns Success message\n   */\n  async deleteUser(userId: string): Promise<string> {\n    try {\n      const response = await axios.delete(`${API_URL}/auth/users/${userId}`, {\n        headers: this.authHeader(),\n      });\n      if (response.data.success) {\n        return response.data.message;\n      }\n      throw new Error('Failed to delete user');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to delete user');\n    }\n  },\n};\n\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}