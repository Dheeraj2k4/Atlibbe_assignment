{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\pages\\\\ProductForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi } from '../services/api';\nimport { aiApi } from '../services/aiApi'; // Added import for aiApi\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Added import for Question\n\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({\n  theme\n}) => theme.borderRadius.default};\n  box-shadow: ${({\n  theme\n}) => theme.shadows.medium};\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    padding: 1.5rem;\n  }\n`;\n_c = FormContainer;\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n_c2 = FormHeader;\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  margin-bottom: 1rem;\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    font-size: 1.75rem;\n  }\n`;\n_c3 = FormTitle;\nconst FormDescription = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.lightText};\n  font-size: 1.125rem;\n\n  @media (max-width: ${({\n  theme\n}) => theme.breakpoints.md}) {\n    font-size: 1rem;\n  }\n`;\n_c4 = FormDescription;\nconst StepContent = styled.div`\n  margin-bottom: 2rem;\n`;\nconst StepTitle = styled.h2`\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n`;\nconst StepDescription = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.lightText};\n  margin-bottom: 2rem;\n`;\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n_c5 = FormActions;\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n_c6 = LoadingOverlay;\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n_c7 = Spinner;\nconst basicFields = [{\n  id: 'name',\n  question_text: 'Product Name',\n  question_type: 'text',\n  required: true\n}, {\n  id: 'description',\n  question_text: 'Product Description',\n  question_type: 'text',\n  required: true,\n  tooltip: 'Provide a detailed description of your product, including its purpose and benefits.'\n}, {\n  id: 'category',\n  question_text: 'Product Category',\n  question_type: 'select',\n  required: true,\n  options: [{\n    value: 'supplements',\n    label: 'Supplements'\n  }, {\n    value: 'food',\n    label: 'Food & Beverage'\n  }, {\n    value: 'cosmetics',\n    label: 'Cosmetics'\n  }, {\n    value: 'personal_care',\n    label: 'Personal Care'\n  }, {\n    value: 'household',\n    label: 'Household Products'\n  }, {\n    value: 'other',\n    label: 'Other'\n  }]\n}];\nconst initialBasicValues = {\n  name: '',\n  description: '',\n  category: ''\n};\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required')\n});\nconst ProductForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1); // 1: basic, 2: dynamic\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [basicInfo, setBasicInfo] = useState(null);\n  const [dynamicQuestions, setDynamicQuestions] = useState([]);\n\n  // Step 1: Basic info submit\n  const handleBasicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating follow-up questions...');\n    try {\n      // Prepare product object for AI\n      const product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: []\n      };\n      const response = await aiApi.generateQuestions({\n        product\n      });\n      if (response.success && response.data && response.data.questions.length > 0) {\n        setBasicInfo(values);\n        setDynamicQuestions(response.data.questions);\n        setStep(2);\n      } else {\n        alert('Failed to generate follow-up questions.');\n      }\n    } catch (error) {\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Step 2: Dynamic questions submit\n  const handleDynamicSubmit = async (values, {\n    setSubmitting\n  }) => {\n    setIsLoading(true);\n    setLoadingMessage('Submitting your product information...');\n    try {\n      // Combine basic info and dynamic answers\n      const product = {\n        name: (basicInfo === null || basicInfo === void 0 ? void 0 : basicInfo.name) || '',\n        description: (basicInfo === null || basicInfo === void 0 ? void 0 : basicInfo.description) || '',\n        category: (basicInfo === null || basicInfo === void 0 ? void 0 : basicInfo.category) || '',\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {}\n      };\n      dynamicQuestions.forEach(q => {\n        product.additional_info[q.id || q.question_text] = values[q.id || q.question_text];\n      });\n      const response = await productApi.createProduct(product);\n      if (response.success && response.data) {\n        navigate(`/report/${response.data.id}`);\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product. Please try again.'}`);\n      }\n    } catch (error) {\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Dynamic validation schema\n  const dynamicValidation = React.useMemo(() => {\n    const shape = {};\n    dynamicQuestions.forEach(q => {\n      shape[q.id || q.question_text] = q.required ? Yup.string().required('This field is required') : Yup.string();\n    });\n    return Yup.object(shape);\n  }, [dynamicQuestions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n        children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n          children: \"Product Submission Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n          children: \"Complete the form below to generate a transparency report for your product.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), step === 1 && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialBasicValues,\n        validationSchema: basicValidation,\n        onSubmit: handleBasicSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [basicFields.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id || '',\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: Array.isArray(field.options) ? field.options.map(option => typeof option === 'string' ? {\n              value: option,\n              label: option\n            } : option) : undefined,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), step === 2 && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: dynamicQuestions.reduce((acc, q) => {\n          acc[q.id || q.question_text] = '';\n          return acc;\n        }, {}),\n        validationSchema: dynamicValidation,\n        onSubmit: handleDynamicSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n        children: ({\n          isSubmitting,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [dynamicQuestions.map(field => /*#__PURE__*/_jsxDEV(FormField, {\n            label: field.question_text,\n            name: field.id || field.question_text,\n            type: field.question_type === 'select' ? 'select' : 'text',\n            options: Array.isArray(field.options) ? field.options.map(option => typeof option === 'string' ? {\n              value: option,\n              label: option\n            } : option) : undefined,\n            tooltip: field.tooltip,\n            required: field.required\n          }, field.id || field.question_text, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(FormActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              isLoading: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductForm, \"YjQtuZCqs44wnPZtsRC6X9gXr54=\", false, function () {\n  return [useNavigate];\n});\n_c8 = ProductForm;\nexport default ProductForm;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"FormContainer\");\n$RefreshReg$(_c2, \"FormHeader\");\n$RefreshReg$(_c3, \"FormTitle\");\n$RefreshReg$(_c4, \"FormDescription\");\n$RefreshReg$(_c5, \"FormActions\");\n$RefreshReg$(_c6, \"LoadingOverlay\");\n$RefreshReg$(_c7, \"Spinner\");\n$RefreshReg$(_c8, \"ProductForm\");","map":{"version":3,"names":["React","useState","useNavigate","styled","Formik","Form","Yup","FormField","Button","productApi","aiApi","jsxDEV","_jsxDEV","FormContainer","div","theme","borderRadius","default","shadows","medium","breakpoints","md","_c","FormHeader","_c2","FormTitle","h1","colors","primary","_c3","FormDescription","p","lightText","_c4","StepContent","StepTitle","h2","StepDescription","FormActions","_c5","LoadingOverlay","_c6","Spinner","_c7","basicFields","id","question_text","question_type","required","tooltip","options","value","label","initialBasicValues","name","description","category","basicValidation","object","string","ProductForm","_s","navigate","step","setStep","isLoading","setIsLoading","loadingMessage","setLoadingMessage","basicInfo","setBasicInfo","dynamicQuestions","setDynamicQuestions","handleBasicSubmit","values","setSubmitting","product","ingredients","manufacturing_location","certifications","response","generateQuestions","success","data","questions","length","alert","error","handleDynamicSubmit","additional_info","forEach","q","createProduct","dynamicValidation","useMemo","shape","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","validationSchema","onSubmit","validateOnChange","validateOnBlur","isSubmitting","map","field","type","Array","isArray","option","undefined","disabled","reduce","acc","_c8","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/pages/ProductForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from '../components/FormField';\nimport Button from '../components/Button';\nimport { productApi } from '../services/api';\nimport { FormStep, FormValues } from '../types';\nimport { aiApi } from '../services/aiApi'; // Added import for aiApi\nimport { Question } from '../types'; // Added import for Question\n\nconst FormContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: ${({ theme }) => theme.borderRadius.default};\n  box-shadow: ${({ theme }) => theme.shadows.medium};\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    padding: 1.5rem;\n  }\n`;\n\nconst FormHeader = styled.div`\n  margin-bottom: 2rem;\n  text-align: center;\n`;\n\nconst FormTitle = styled.h1`\n  font-size: 2rem;\n  color: ${({ theme }) => theme.colors.primary};\n  margin-bottom: 1rem;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 1.75rem;\n  }\n`;\n\nconst FormDescription = styled.p`\n  color: ${({ theme }) => theme.colors.lightText};\n  font-size: 1.125rem;\n\n  @media (max-width: ${({ theme }) => theme.breakpoints.md}) {\n    font-size: 1rem;\n  }\n`;\n\nconst StepContent = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst StepTitle = styled.h2`\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  color: ${({ theme }) => theme.colors.primary};\n`;\n\nconst StepDescription = styled.p`\n  color: ${({ theme }) => theme.colors.lightText};\n  margin-bottom: 2rem;\n`;\n\nconst FormActions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n\nconst LoadingOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  color: white;\n`;\n\nconst Spinner = styled.div`\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid white;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 1rem;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst basicFields: Question[] = [\n  {\n    id: 'name',\n    question_text: 'Product Name',\n    question_type: 'text',\n    required: true,\n  },\n  {\n    id: 'description',\n    question_text: 'Product Description',\n    question_type: 'text',\n    required: true,\n    tooltip: 'Provide a detailed description of your product, including its purpose and benefits.',\n  },\n  {\n    id: 'category',\n    question_text: 'Product Category',\n    question_type: 'select',\n    required: true,\n    options: [\n      { value: 'supplements', label: 'Supplements' },\n      { value: 'food', label: 'Food & Beverage' },\n      { value: 'cosmetics', label: 'Cosmetics' },\n      { value: 'personal_care', label: 'Personal Care' },\n      { value: 'household', label: 'Household Products' },\n      { value: 'other', label: 'Other' },\n    ],\n  },\n];\n\nconst initialBasicValues: FormValues = {\n  name: '',\n  description: '',\n  category: '',\n};\n\nconst basicValidation = Yup.object({\n  name: Yup.string().required('Product name is required'),\n  description: Yup.string().required('Product description is required'),\n  category: Yup.string().required('Product category is required'),\n});\n\nconst ProductForm: React.FC = () => {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1); // 1: basic, 2: dynamic\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [basicInfo, setBasicInfo] = useState<FormValues | null>(null);\n  const [dynamicQuestions, setDynamicQuestions] = useState<Question[]>([]);\n\n  // Step 1: Basic info submit\n  const handleBasicSubmit = async (values: FormValues, { setSubmitting }: FormikHelpers<FormValues>) => {\n    setIsLoading(true);\n    setLoadingMessage('Generating follow-up questions...');\n    try {\n      // Prepare product object for AI\n      const product = {\n        name: values.name,\n        description: values.description,\n        category: values.category,\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n      };\n      const response = await aiApi.generateQuestions({ product });\n      if (response.success && response.data && response.data.questions.length > 0) {\n        setBasicInfo(values);\n        setDynamicQuestions(response.data.questions);\n        setStep(2);\n      } else {\n        alert('Failed to generate follow-up questions.');\n      }\n    } catch (error) {\n      alert('An error occurred while generating questions.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Step 2: Dynamic questions submit\n  const handleDynamicSubmit = async (values: FormValues, { setSubmitting }: FormikHelpers<FormValues>) => {\n    setIsLoading(true);\n    setLoadingMessage('Submitting your product information...');\n    try {\n      // Combine basic info and dynamic answers\n      const product = {\n        name: basicInfo?.name || '',\n        description: basicInfo?.description || '',\n        category: basicInfo?.category || '',\n        ingredients: '',\n        manufacturing_location: '',\n        certifications: [],\n        additional_info: {},\n      };\n      dynamicQuestions.forEach((q) => {\n        product.additional_info[q.id || q.question_text] = values[q.id || q.question_text];\n      });\n      const response = await productApi.createProduct(product);\n      if (response.success && response.data) {\n        navigate(`/report/${response.data.id}`);\n      } else {\n        alert(`Error: ${response.error || 'Failed to submit product. Please try again.'}`);\n      }\n    } catch (error) {\n      alert('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setSubmitting(false);\n    }\n  };\n\n  // Dynamic validation schema\n  const dynamicValidation = React.useMemo(() => {\n    const shape: Record<string, any> = {};\n    dynamicQuestions.forEach((q) => {\n      shape[q.id || q.question_text] = q.required\n        ? Yup.string().required('This field is required')\n        : Yup.string();\n    });\n    return Yup.object(shape);\n  }, [dynamicQuestions]);\n\n  return (\n    <div className=\"container\">\n      <FormContainer>\n        <FormHeader>\n          <FormTitle>Product Submission Form</FormTitle>\n          <FormDescription>\n            Complete the form below to generate a transparency report for your product.\n          </FormDescription>\n        </FormHeader>\n        {step === 1 && (\n          <Formik\n            initialValues={initialBasicValues}\n            validationSchema={basicValidation}\n            onSubmit={handleBasicSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting, values }) => (\n              <Form>\n                {basicFields.map((field) => (\n                  <FormField\n                    key={field.id}\n                    label={field.question_text}\n                    name={field.id || ''}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={\n                      Array.isArray(field.options)\n                        ? field.options.map((option) =>\n                            typeof option === 'string'\n                              ? { value: option, label: option }\n                              : option\n                          )\n                        : undefined\n                    }\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Next\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n        {step === 2 && (\n          <Formik\n            initialValues={dynamicQuestions.reduce((acc, q) => {\n              acc[q.id || q.question_text] = '';\n              return acc;\n            }, {} as FormValues)}\n            validationSchema={dynamicValidation}\n            onSubmit={handleDynamicSubmit}\n            validateOnChange={false}\n            validateOnBlur={true}\n          >\n            {({ isSubmitting, values }) => (\n              <Form>\n                {dynamicQuestions.map((field) => (\n                  <FormField\n                    key={field.id || field.question_text}\n                    label={field.question_text}\n                    name={field.id || field.question_text}\n                    type={field.question_type === 'select' ? 'select' : 'text'}\n                    options={\n                      Array.isArray(field.options)\n                        ? field.options.map((option) =>\n                            typeof option === 'string'\n                              ? { value: option, label: option }\n                              : option\n                          )\n                        : undefined\n                    }\n                    tooltip={field.tooltip}\n                    required={field.required}\n                  />\n                ))}\n                <FormActions>\n                  <Button type=\"submit\" disabled={isSubmitting} isLoading={isSubmitting}>\n                    Submit\n                  </Button>\n                </FormActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n        {isLoading && (\n          <LoadingOverlay>\n            <Spinner />\n            <p>{loadingMessage}</p>\n          </LoadingOverlay>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default ProductForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}