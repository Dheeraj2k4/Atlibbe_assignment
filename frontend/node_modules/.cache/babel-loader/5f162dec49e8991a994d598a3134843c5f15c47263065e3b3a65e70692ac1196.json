{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dheeraj\\\\Desktop\\\\Altibbe_assignemnt\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\n\n// Context interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default values\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  isLoading: false,\n  error: null,\n  isAuthenticated: false,\n  isAdmin: false,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  updateProfile: async () => {},\n  clearError: () => {}\n});\n\n// Props interface\n\n/**\r\n * Auth Provider Component\r\n * Provides authentication state and methods to the app\r\n */\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize auth state from local storage\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        if (authService.isLoggedIn()) {\n          const userData = authService.getUser();\n          setUser(userData);\n        }\n      } catch (err) {\n        console.error('Error initializing auth:', err);\n        authService.logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  /**\r\n   * Login user\r\n   * @param credentials User login credentials\r\n   */\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const userData = await authService.login(credentials);\n      setUser(userData);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Register user\r\n   * @param userData User registration data\r\n   */\n  const register = async userData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const newUser = await authService.register(userData);\n      setUser(newUser);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Logout user\r\n   */\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n\n  /**\r\n   * Update user profile\r\n   * @param updateData Profile update data\r\n   */\n  const updateProfile = async updateData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const updatedUser = await authService.updateProfile(updateData);\n      setUser(updatedUser);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Clear error\r\n   */\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Compute derived state\n  const isAuthenticated = !!user;\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n\n  // Context value\n  const value = {\n    user,\n    isLoading,\n    error,\n    isAuthenticated,\n    isAdmin,\n    login,\n    register,\n    logout,\n    updateProfile,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 10\n  }, this);\n};\n\n/**\r\n * Custom hook to use auth context\r\n * @returns Auth context\r\n */\n_s(AuthProvider, \"caAZa649wyY9nHJT6au393y4yCs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","user","isLoading","error","isAuthenticated","isAdmin","login","register","logout","updateProfile","clearError","AuthProvider","children","_s","setUser","setIsLoading","setError","initAuth","isLoggedIn","userData","getUser","err","console","credentials","message","newUser","updateData","updatedUser","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Dheeraj/Desktop/Altibbe_assignemnt/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport authService, { UserData, LoginCredentials, RegisterData, UpdateProfileData } from '../services/authService';\r\n\r\n// Context interface\r\ninterface AuthContextType {\r\n  user: UserData | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  isAuthenticated: boolean;\r\n  isAdmin: boolean;\r\n  login: (credentials: LoginCredentials) => Promise<void>;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  logout: () => void;\r\n  updateProfile: (updateData: UpdateProfileData) => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\n// Create context with default values\r\nconst AuthContext = createContext<AuthContextType>({\r\n  user: null,\r\n  isLoading: false,\r\n  error: null,\r\n  isAuthenticated: false,\r\n  isAdmin: false,\r\n  login: async () => {},\r\n  register: async () => {},\r\n  logout: () => {},\r\n  updateProfile: async () => {},\r\n  clearError: () => {},\r\n});\r\n\r\n// Props interface\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * Auth Provider Component\r\n * Provides authentication state and methods to the app\r\n */\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<UserData | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize auth state from local storage\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      try {\r\n        if (authService.isLoggedIn()) {\r\n          const userData = authService.getUser();\r\n          setUser(userData);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error initializing auth:', err);\r\n        authService.logout();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  /**\r\n   * Login user\r\n   * @param credentials User login credentials\r\n   */\r\n  const login = async (credentials: LoginCredentials) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const userData = await authService.login(credentials);\r\n      setUser(userData);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Register user\r\n   * @param userData User registration data\r\n   */\r\n  const register = async (userData: RegisterData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const newUser = await authService.register(userData);\r\n      setUser(newUser);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Logout user\r\n   */\r\n  const logout = () => {\r\n    authService.logout();\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Update user profile\r\n   * @param updateData Profile update data\r\n   */\r\n  const updateProfile = async (updateData: UpdateProfileData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const updatedUser = await authService.updateProfile(updateData);\r\n      setUser(updatedUser);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear error\r\n   */\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  // Compute derived state\r\n  const isAuthenticated = !!user;\r\n  const isAdmin = user?.role === 'admin';\r\n\r\n  // Context value\r\n  const value = {\r\n    user,\r\n    isLoading,\r\n    error,\r\n    isAuthenticated,\r\n    isAdmin,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    clearError,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n/**\r\n * Custom hook to use auth context\r\n * @returns Auth context\r\n */\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}